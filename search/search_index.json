{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flask Sugar Flask Sugar is a web framework for building APIs with Flask, Pydantic and Python 3.6+ type hints. check parameters and generate API documents automatically Documentation: https://shangsky.github.io/flask-sugar or https://flask-sugar.vercel.app/ Source Code: https://github.com/shangsky/flask-sugar Requirements Python 3.6+ Flask 2.0+ Installation $ pip install flask-sugar Example # save this as app.py from flask_sugar import Sugar , Header from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str size : int class Resp ( BaseModel ): a : int b : str c : str item : Item @app . post ( \"/item/<a>\" ) def demo ( a : int , # path param item : Item , # json body param b : str = \"default_query_param_b\" , # query param c : str = Header ( \"default_header_param_b\" ), # request header param ) -> Resp : \"\"\"demo page\"\"\" return Resp ( a = a , b = b , c = c , item = item ) $ flask run --reload * Running on http://127.0.0.1:5000/ ( Press CTRL+C to quit ) Now visit the API documentation with Swagger UI at http://localhost:5000/doc: visit the API documentation with Redoc at http://localhost:5000/redoc: License This project is licensed under the terms of the MIT license.","title":"Quick Start"},{"location":"#flask-sugar","text":"Flask Sugar is a web framework for building APIs with Flask, Pydantic and Python 3.6+ type hints. check parameters and generate API documents automatically Documentation: https://shangsky.github.io/flask-sugar or https://flask-sugar.vercel.app/ Source Code: https://github.com/shangsky/flask-sugar","title":"Flask Sugar"},{"location":"#requirements","text":"Python 3.6+ Flask 2.0+","title":"Requirements"},{"location":"#installation","text":"$ pip install flask-sugar","title":"Installation"},{"location":"#example","text":"# save this as app.py from flask_sugar import Sugar , Header from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str size : int class Resp ( BaseModel ): a : int b : str c : str item : Item @app . post ( \"/item/<a>\" ) def demo ( a : int , # path param item : Item , # json body param b : str = \"default_query_param_b\" , # query param c : str = Header ( \"default_header_param_b\" ), # request header param ) -> Resp : \"\"\"demo page\"\"\" return Resp ( a = a , b = b , c = c , item = item ) $ flask run --reload * Running on http://127.0.0.1:5000/ ( Press CTRL+C to quit ) Now visit the API documentation with Swagger UI at http://localhost:5000/doc: visit the API documentation with Redoc at http://localhost:5000/redoc:","title":"Example"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"doc-route-filter/","text":"DocRouteFilter You can use doc_route_filter to filter or set route-related properties in the document example Filter out routes starting with /b from flask_sugar import Sugar app = Sugar ( __name__ , doc_route_filter = lambda view , rule : not rule . rule . startswith ( \"/b\" )) @app . get ( \"/a/1\" ) def a1 (): return \"a1\" @app . get ( \"/b/1\" ) def b1 (): return \"a2\"","title":"DocRouteFilter"},{"location":"doc-route-filter/#docroutefilter","text":"You can use doc_route_filter to filter or set route-related properties in the document","title":"DocRouteFilter"},{"location":"doc-route-filter/#example","text":"Filter out routes starting with /b from flask_sugar import Sugar app = Sugar ( __name__ , doc_route_filter = lambda view , rule : not rule . rule . startswith ( \"/b\" )) @app . get ( \"/a/1\" ) def a1 (): return \"a1\" @app . get ( \"/b/1\" ) def b1 (): return \"a2\"","title":"example"},{"location":"handling-errors/","text":"Handling Errors If you need to change default output for validation errors - override RequestValidationError exception handler: from flask_sugar import Sugar , RequestValidationError app = Sugar ( __name__ ) @app . errorhandler ( RequestValidationError ) def error_handle ( e : RequestValidationError ): return { \"detail\" : e . errors }","title":"Handling Errors"},{"location":"handling-errors/#handling-errors","text":"If you need to change default output for validation errors - override RequestValidationError exception handler: from flask_sugar import Sugar , RequestValidationError app = Sugar ( __name__ ) @app . errorhandler ( RequestValidationError ) def error_handle ( e : RequestValidationError ): return { \"detail\" : e . errors }","title":"Handling Errors"},{"location":"operation-parameters/","text":"Operations parameters Doc Enable You can set doc_enable=False to hide the doc of current api from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/demo1\" , doc_enable = False ) def demo1 (): return { \"code\" : 0 } @app . get ( \"/demo2\" ) def demo2 (): return { \"code\" : 0 } Tags You can group your API operations using the tags argument ( list[str] ). from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/demo1\" ) def demo1 (): return { \"code\" : 0 } @app . get ( \"/demo2\" , tags = [ \"Hello\" ]) def demo2 (): return { \"code\" : 0 } Tagged operations may be handled differently by various tools and libraries. For example, the Swagger UI uses tags to group the displayed operations. Blueprint tags You can use tags argument to apply tags to all operations declared by Blueprint, Routes inherit the Blueprint's tags, you can set extends_tags=False to disable it: from flask_sugar import Sugar , Blueprint app = Sugar ( __name__ ) hello_bp = Blueprint ( \"hello\" , __name__ , tags = [ \"world\" ]) @hello_bp . get ( \"/demo1\" ) def demo1 (): return { \"code\" : 0 } @hello_bp . get ( \"/demo2\" , extends_tags = False ) def demo2 (): return { \"code\" : 0 } app . register_blueprint ( hello_bp ) Note the Blueprint tags default value is [ name of the Blueprint ] Summary Summary is a human-readable name for your operation. By default, it's generated by capitalizing your operation function name: from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/hello/\" ) def hello ( name : str ): return { \"hello\" : name } If you want to override it or translate it to other language, use the summary argument in the api decorator. from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/hello/\" , summary = \"Say Hello\" ) def hello ( name : str ): return { \"hello\" : name } Description If you need to provide more information about your operation, use either the description argument or normal Python docstrings: @app . get ( \"/hello/\" , description = \"say hello to any one\" ) def hello ( name : str ): return { \"hello\" : name } When you need to provide a long multi line description, you can use Python docstrings for the function definition: @app . get ( \"/hello/\" ) def hello ( name : str ): \"\"\" Say Hello: - hello - world \"\"\" return { \"hello\" : name } Response Description If you need to provide more information about your response, use either the response_description argument: @app . get ( \"/hello/\" , response_description = \"Success Response\" ) def hello ( name : str ): return { \"hello\" : name } Deprecated If you need to mark an operation as deprecated without removing it, use the deprecated argument: @app . get ( \"/hello/\" , deprecated = True ) def hello ( name : str ): return { \"hello\" : name } It will be marked as deprecated in the JSON Schema and also in the interactive OpenAPI docs: OperationId The OpenAPI operationId is an optional unique string used to identify an operation. If provided, these IDs must be unique among all operations described in your API. By default, Flask Sugar sets it to view endpoint + __ + http method in lower . If you want to set it individually for each operation, use the operation_id argument: @app . post ( \"/tasks\" , operation_id = \"create_task\" ) def new_task (): ... Security A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ({}) can be included in the array. This definition overrides any declared top-level security. To remove a top-level security declaration, an empty array can be used. Extra The rest of the Operation properties can override all the properties previously set","title":"Operations parameters"},{"location":"operation-parameters/#operations-parameters","text":"","title":"Operations parameters"},{"location":"operation-parameters/#doc-enable","text":"You can set doc_enable=False to hide the doc of current api from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/demo1\" , doc_enable = False ) def demo1 (): return { \"code\" : 0 } @app . get ( \"/demo2\" ) def demo2 (): return { \"code\" : 0 }","title":"Doc Enable"},{"location":"operation-parameters/#tags","text":"You can group your API operations using the tags argument ( list[str] ). from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/demo1\" ) def demo1 (): return { \"code\" : 0 } @app . get ( \"/demo2\" , tags = [ \"Hello\" ]) def demo2 (): return { \"code\" : 0 } Tagged operations may be handled differently by various tools and libraries. For example, the Swagger UI uses tags to group the displayed operations.","title":"Tags"},{"location":"operation-parameters/#blueprint-tags","text":"You can use tags argument to apply tags to all operations declared by Blueprint, Routes inherit the Blueprint's tags, you can set extends_tags=False to disable it: from flask_sugar import Sugar , Blueprint app = Sugar ( __name__ ) hello_bp = Blueprint ( \"hello\" , __name__ , tags = [ \"world\" ]) @hello_bp . get ( \"/demo1\" ) def demo1 (): return { \"code\" : 0 } @hello_bp . get ( \"/demo2\" , extends_tags = False ) def demo2 (): return { \"code\" : 0 } app . register_blueprint ( hello_bp ) Note the Blueprint tags default value is [ name of the Blueprint ]","title":"Blueprint tags"},{"location":"operation-parameters/#summary","text":"Summary is a human-readable name for your operation. By default, it's generated by capitalizing your operation function name: from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/hello/\" ) def hello ( name : str ): return { \"hello\" : name } If you want to override it or translate it to other language, use the summary argument in the api decorator. from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/hello/\" , summary = \"Say Hello\" ) def hello ( name : str ): return { \"hello\" : name }","title":"Summary"},{"location":"operation-parameters/#description","text":"If you need to provide more information about your operation, use either the description argument or normal Python docstrings: @app . get ( \"/hello/\" , description = \"say hello to any one\" ) def hello ( name : str ): return { \"hello\" : name } When you need to provide a long multi line description, you can use Python docstrings for the function definition: @app . get ( \"/hello/\" ) def hello ( name : str ): \"\"\" Say Hello: - hello - world \"\"\" return { \"hello\" : name }","title":"Description"},{"location":"operation-parameters/#response-description","text":"If you need to provide more information about your response, use either the response_description argument: @app . get ( \"/hello/\" , response_description = \"Success Response\" ) def hello ( name : str ): return { \"hello\" : name }","title":"Response Description"},{"location":"operation-parameters/#deprecated","text":"If you need to mark an operation as deprecated without removing it, use the deprecated argument: @app . get ( \"/hello/\" , deprecated = True ) def hello ( name : str ): return { \"hello\" : name } It will be marked as deprecated in the JSON Schema and also in the interactive OpenAPI docs:","title":"Deprecated"},{"location":"operation-parameters/#operationid","text":"The OpenAPI operationId is an optional unique string used to identify an operation. If provided, these IDs must be unique among all operations described in your API. By default, Flask Sugar sets it to view endpoint + __ + http method in lower . If you want to set it individually for each operation, use the operation_id argument: @app . post ( \"/tasks\" , operation_id = \"create_task\" ) def new_task (): ...","title":"OperationId"},{"location":"operation-parameters/#security","text":"A declaration of which security mechanisms can be used for this operation. The list of values includes alternative security requirement objects that can be used. Only one of the security requirement objects need to be satisfied to authorize a request. To make security optional, an empty security requirement ({}) can be included in the array. This definition overrides any declared top-level security. To remove a top-level security declaration, an empty array can be used.","title":"Security"},{"location":"operation-parameters/#extra","text":"The rest of the Operation properties can override all the properties previously set","title":"Extra"},{"location":"response/","text":"Response You can declare the model used for the response with the parameter response_model in any of the path operations : @app.get() @app.post() @app.put() @app.delete() or declare the model/TypedDict in the return value typehint. response_model in param from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None tags : List [ str ] = [] @app . post ( \"/item1/\" , response_model = Item ) def create_item1 ( item : Item ): return item @app . post ( \"/item2/\" , response_model = Item ) def create_item2 ( item : Item ): return item . dict () Note Notice that response_model is a parameter of the \"decorator\" method ( get , post , etc). Not of your path operation function , like all the parameters and body. The returned value can be a model or a dict. It receives the same type you would declare for a Pydantic model attribute, so, it should be a Pydantic model. Flask Sugar will use this response_model to: Convert the output data to its type declaration. Validate the data. Add a JSON Schema for the response, in the OpenAPI path operation . Will be used by the automatic documentation systems. But most importantly: Will limit the output data to that of the model. We'll see how that's important below. Technical Details The response model is declared in this parameter instead of as a function return type annotation, because the path function may not actually return that response model but rather return a dict , database object or some other model, and then use the response_model to perform the field limiting and serialization. Model in typehint from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None tags : List [ str ] = [] @app . post ( \"/items/\" ) def create_item ( item : Item ) -> Item : return item It works the same as model in param. TypedDict in typehint from typing import List from typing_extensions import TypedDict from flask_sugar import Sugar app = Sugar ( __name__ ) class UserInfo ( TypedDict ): name : str age : int tags : List [ str ] @app . get ( \"/\" ) def index () -> UserInfo : return { \"name\" : \"rockman\" , \"age\" : 25 , \"tags\" : [ \"a\" , \"b\" ]} Note You can't use TypedDict in params of path operations or in decorator . It only works in return value typehint. It checks the return value of path operations both type check statically and at runtime Response Model encoding parameters Your response model could have default values, like: from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/<item_id>\" , response_model = Item , response_model_exclude_unset = True ) def read_item ( item_id : str ): return items [ item_id ] description: Optional[str] = None has a default of None . tax: float = 10.5 has a default of 10.5 . tags: List[str] = [] as a default of an empty list: [] . but you might want to omit them from the result if they were not actually stored. For example, if you have models with many optional attributes in a NoSQL database, but you don't want to send very long JSON responses full of default values. Use the response_model_exclude_unset parameter You can set the path operation decorator parameter response_model_exclude_unset=True : from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/<item_id>\" , response_model = Item , response_model_exclude_unset = True ) def read_item ( item_id : str ): return items [ item_id ] and those default values won't be included in the response, only the values actually set. So, if you send a request to that path operation for the item with ID foo , the response (not including default values) will be: { \"name\" : \"Foo\" , \"price\" : 50.2 } Info Flask Sugar uses Pydantic model's .dict() with its exclude_unset parameter to achieve this. Info You can also use: response_model_exclude_defaults=True response_model_exclude_none=True as described in the Pydantic docs for exclude_defaults and exclude_none . Data with values for fields with defaults But if your data has values for the model's fields with default values, like the item with ID bar : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } they will be included in the response. Data with the same values as the defaults If the data has the same values as the default ones, like the item with ID baz : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } Flask Sugar is smart enough (actually, Pydantic is smart enough) to realize that, even though description , tax , and tags have the same values as the defaults, they were set explicitly (instead of taken from the defaults). So, they will be included in the JSON response. Tip Notice that the default values can be anything, not only None . They can be a list ( [] ), a float of 10.5 , etc. response_model_include and response_model_exclude You can also use the path operation decorator parameters response_model_include and response_model_exclude . They take a set of str with the name of the attributes to include (omitting the rest) or to exclude (including the rest). This can be used as a quick shortcut if you have only one Pydantic model and want to remove some data from the output. Tip But it is still recommended to use the ideas above, using multiple classes, instead of these parameters. This is because the JSON Schema generated in your app's OpenAPI (and the docs) will still be the one for the complete model, even if you use response_model_include or response_model_exclude to omit some attributes. This also applies to response_model_by_alias that works similarly. from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/<item_id>/name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/<item_id>/public\" , response_model = Item , response_model_exclude = { \"tax\" }) def read_item_public_data ( item_id : str ): return items [ item_id ] Tip The syntax {\"name\", \"description\"} creates a set with those two values. It is equivalent to set([\"name\", \"description\"]) . Recap Use the path operation decorator's parameter response_model to define response models and especially to ensure private data is filtered out. Use response_model_exclude_unset to return only the values explicitly set.","title":"Response"},{"location":"response/#response","text":"You can declare the model used for the response with the parameter response_model in any of the path operations : @app.get() @app.post() @app.put() @app.delete() or declare the model/TypedDict in the return value typehint.","title":"Response"},{"location":"response/#response_model-in-param","text":"from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None tags : List [ str ] = [] @app . post ( \"/item1/\" , response_model = Item ) def create_item1 ( item : Item ): return item @app . post ( \"/item2/\" , response_model = Item ) def create_item2 ( item : Item ): return item . dict () Note Notice that response_model is a parameter of the \"decorator\" method ( get , post , etc). Not of your path operation function , like all the parameters and body. The returned value can be a model or a dict. It receives the same type you would declare for a Pydantic model attribute, so, it should be a Pydantic model. Flask Sugar will use this response_model to: Convert the output data to its type declaration. Validate the data. Add a JSON Schema for the response, in the OpenAPI path operation . Will be used by the automatic documentation systems. But most importantly: Will limit the output data to that of the model. We'll see how that's important below. Technical Details The response model is declared in this parameter instead of as a function return type annotation, because the path function may not actually return that response model but rather return a dict , database object or some other model, and then use the response_model to perform the field limiting and serialization.","title":"response_model in param"},{"location":"response/#model-in-typehint","text":"from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None tags : List [ str ] = [] @app . post ( \"/items/\" ) def create_item ( item : Item ) -> Item : return item It works the same as model in param.","title":"Model in typehint"},{"location":"response/#typeddict-in-typehint","text":"from typing import List from typing_extensions import TypedDict from flask_sugar import Sugar app = Sugar ( __name__ ) class UserInfo ( TypedDict ): name : str age : int tags : List [ str ] @app . get ( \"/\" ) def index () -> UserInfo : return { \"name\" : \"rockman\" , \"age\" : 25 , \"tags\" : [ \"a\" , \"b\" ]} Note You can't use TypedDict in params of path operations or in decorator . It only works in return value typehint. It checks the return value of path operations both type check statically and at runtime","title":"TypedDict in typehint"},{"location":"response/#response-model-encoding-parameters","text":"Your response model could have default values, like: from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/<item_id>\" , response_model = Item , response_model_exclude_unset = True ) def read_item ( item_id : str ): return items [ item_id ] description: Optional[str] = None has a default of None . tax: float = 10.5 has a default of 10.5 . tags: List[str] = [] as a default of an empty list: [] . but you might want to omit them from the result if they were not actually stored. For example, if you have models with many optional attributes in a NoSQL database, but you don't want to send very long JSON responses full of default values.","title":"Response Model encoding parameters"},{"location":"response/#use-the-response_model_exclude_unset-parameter","text":"You can set the path operation decorator parameter response_model_exclude_unset=True : from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/<item_id>\" , response_model = Item , response_model_exclude_unset = True ) def read_item ( item_id : str ): return items [ item_id ] and those default values won't be included in the response, only the values actually set. So, if you send a request to that path operation for the item with ID foo , the response (not including default values) will be: { \"name\" : \"Foo\" , \"price\" : 50.2 } Info Flask Sugar uses Pydantic model's .dict() with its exclude_unset parameter to achieve this. Info You can also use: response_model_exclude_defaults=True response_model_exclude_none=True as described in the Pydantic docs for exclude_defaults and exclude_none .","title":"Use the response_model_exclude_unset parameter"},{"location":"response/#data-with-values-for-fields-with-defaults","text":"But if your data has values for the model's fields with default values, like the item with ID bar : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } they will be included in the response.","title":"Data with values for fields with defaults"},{"location":"response/#data-with-the-same-values-as-the-defaults","text":"If the data has the same values as the default ones, like the item with ID baz : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } Flask Sugar is smart enough (actually, Pydantic is smart enough) to realize that, even though description , tax , and tags have the same values as the defaults, they were set explicitly (instead of taken from the defaults). So, they will be included in the JSON response. Tip Notice that the default values can be anything, not only None . They can be a list ( [] ), a float of 10.5 , etc.","title":"Data with the same values as the defaults"},{"location":"response/#response_model_include-and-response_model_exclude","text":"You can also use the path operation decorator parameters response_model_include and response_model_exclude . They take a set of str with the name of the attributes to include (omitting the rest) or to exclude (including the rest). This can be used as a quick shortcut if you have only one Pydantic model and want to remove some data from the output. Tip But it is still recommended to use the ideas above, using multiple classes, instead of these parameters. This is because the JSON Schema generated in your app's OpenAPI (and the docs) will still be the one for the complete model, even if you use response_model_include or response_model_exclude to omit some attributes. This also applies to response_model_by_alias that works similarly. from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/<item_id>/name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/<item_id>/public\" , response_model = Item , response_model_exclude = { \"tax\" }) def read_item_public_data ( item_id : str ): return items [ item_id ] Tip The syntax {\"name\", \"description\"} creates a set with those two values. It is equivalent to set([\"name\", \"description\"]) .","title":"response_model_include and response_model_exclude"},{"location":"response/#recap","text":"Use the path operation decorator's parameter response_model to define response models and especially to ensure private data is filtered out. Use response_model_exclude_unset to return only the values explicitly set.","title":"Recap"},{"location":"sugar-parameters/","text":"Sugar Parameters The following is an introduction to Sugar parameters. Flask Parameters If you want to know what these parameters do, see the flask documentation . Parameter Type import_name str static_url_path str static_folder str static_host str host_matching bool subdomain_matching bool template_folder str instance_path str instance_relative_config bool root_path str Metadata for API You can set the following fields that are used in the OpenAPI specification and the automatic API docs UIs: Parameter Type Description title str The title of the API. description str A short description of the API. It can use Markdown. doc_version string The version of the API. This is the version of your own application, not of OpenAPI. For example 2.5.0 . terms_service str A URL to the Terms of Service for the API. If provided, this has to be a URL. contact dict The contact information for the exposed API. It can contain several fields. contact fields Parameter Type Description name str The identifying name of the contact person/organization. url str The URL pointing to the contact information. MUST be in the format of a URL. email str The email address of the contact person/organization. MUST be in the format of an email address. license_ dict The license information for the exposed API. It can contain several fields. license_ fields Parameter Type Description name str REQUIRED (if a license_ is set). The license name used for the API. url str A URL to the license used for the API. MUST be in the format of a URL. servers list An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /. security_schemes dict Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749, and OpenID Connect Discovery. security_schemes fields Parameter Type Description type str REQUIRED. The type of the security scheme. Valid values are \"apiKey\", \"http\", \"oauth2\", \"openIdConnect\". description str A short description for security scheme. CommonMark syntax MAY be used for rich text representation. name str REQUIRED. The name of the header, query or cookie parameter to be used. in str REQUIRED. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\". etc enable_doc bool Enable API document, default True cache_openapi_json bool Whether to cache OpenAPI json, default True doc_route_filter DocRouteFilter API Documentation Route Filter Tip more info in swagger documentation You can set them as follows: from flask_sugar import Sugar description = \"\"\" YangGeApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = Sugar ( __name__ , title = \"YangGeApp\" , description = description , doc_version = \"0.0.1\" , terms_service = \"http://localhost/terms/\" , contact = { \"name\" : \"YangGe Team\" , \"url\" : \"http://localhost/contact/\" , \"email\" : \"example@example.com\" , }, license_ = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, servers = [ { \"url\" : \"http://127.0.0.1:5000/\" , \"description\" : \"Development server\" , }, { \"url\" : \"http://localhost:5000/\" , \"description\" : \"Staging server\" , }, ], security_schemes = { \"http basic\" : { \"type\" : \"http\" , \"scheme\" : \"basic\" }, \"api key\" : { \"type\" : \"apiKey\" , \"name\" : \"api_key\" , \"in\" : \"header\" } } ) @app . get ( \"/items/\" ) def read_items (): return { \"name\" : \"YangGe\" } Tip You can write Markdown in the description field and it will be rendered in the output. With this configuration, the automatic API docs would look like: Metadata for tags You can also add additional metadata for the different tags used to group your path operations with the parameter tags . It takes a list containing one dictionary for each tag. Each dictionary can contain: name ( required ): a str with the same tag name you use in the tags parameter in your path operations and Blueprint s. description : a str with a short description for the tag. It can have Markdown and will be shown in the docs UI. externalDocs : a dict describing external documentation with: description : a str with a short description for the external docs. url ( required ): a str with the URL for the external documentation. Create metadata for tags Let's try that in an example with tags for users and items . Create metadata for your tags and pass it to the tags parameter: from flask_sugar import Sugar tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://shangsky.github.io/flask-sugar\" , }, }, ] app = Sugar ( __name__ , tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) def get_users (): return { \"users\" : [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }]} @app . get ( \"/items/\" , tags = [ \"items\" ]) def get_items (): return { \"items\" : [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }]} Notice that you can use Markdown inside of the descriptions, for example \"login\" will be shown in bold ( login ) and \"fancy\" will be shown in italics ( fancy ). Tip You don't have to add metadata for all the tags that you use. Use your tags Use the tags parameter with your path operations (and Blueprint s) to assign them to different tags: from flask_sugar import Sugar tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://shangsky.github.io/flask-sugar\" , }, }, ] app = Sugar ( __name__ , tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) def get_users (): return { \"users\" : [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }]} @app . get ( \"/items/\" , tags = [ \"items\" ]) def get_items (): return { \"items\" : [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }]} Check the docs Now, if you check the docs, they will show all the additional metadata: Order of tags The order of each tag metadata dictionary also defines the order shown in the docs UI. For example, even though users would go after items in alphabetical order, it is shown before them, because we added their metadata as the first dictionary in the list. Docs Url Parameters Parameter Type Description openapi_url_prefix str The prefix of the api documentation. example: openapi_url_prefix=/abc , you should visit the doct at /abc/doc and /abc/redoc . openapi_json_url str The url of openapi.json, if openapi_json_url=None , api doc will close swagger_url str The url of the swagger doc. redoc_url str The url of the redoc. swagger_js_url str The staic js file url of swagger ui. swagger_css_url str The staic css file url of swagger ui. redoc_js_url str The staic js file url of redoc.","title":"Sugar Parameters"},{"location":"sugar-parameters/#sugar-parameters","text":"The following is an introduction to Sugar parameters.","title":"Sugar Parameters"},{"location":"sugar-parameters/#flask-parameters","text":"If you want to know what these parameters do, see the flask documentation . Parameter Type import_name str static_url_path str static_folder str static_host str host_matching bool subdomain_matching bool template_folder str instance_path str instance_relative_config bool root_path str","title":"Flask Parameters"},{"location":"sugar-parameters/#metadata-for-api","text":"You can set the following fields that are used in the OpenAPI specification and the automatic API docs UIs: Parameter Type Description title str The title of the API. description str A short description of the API. It can use Markdown. doc_version string The version of the API. This is the version of your own application, not of OpenAPI. For example 2.5.0 . terms_service str A URL to the Terms of Service for the API. If provided, this has to be a URL. contact dict The contact information for the exposed API. It can contain several fields. contact fields Parameter Type Description name str The identifying name of the contact person/organization. url str The URL pointing to the contact information. MUST be in the format of a URL. email str The email address of the contact person/organization. MUST be in the format of an email address. license_ dict The license information for the exposed API. It can contain several fields. license_ fields Parameter Type Description name str REQUIRED (if a license_ is set). The license name used for the API. url str A URL to the license used for the API. MUST be in the format of a URL. servers list An array of Server Objects, which provide connectivity information to a target server. If the servers property is not provided, or is an empty array, the default value would be a Server Object with a url value of /. security_schemes dict Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), OAuth2's common flows (implicit, password, client credentials and authorization code) as defined in RFC6749, and OpenID Connect Discovery. security_schemes fields Parameter Type Description type str REQUIRED. The type of the security scheme. Valid values are \"apiKey\", \"http\", \"oauth2\", \"openIdConnect\". description str A short description for security scheme. CommonMark syntax MAY be used for rich text representation. name str REQUIRED. The name of the header, query or cookie parameter to be used. in str REQUIRED. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\". etc enable_doc bool Enable API document, default True cache_openapi_json bool Whether to cache OpenAPI json, default True doc_route_filter DocRouteFilter API Documentation Route Filter Tip more info in swagger documentation You can set them as follows: from flask_sugar import Sugar description = \"\"\" YangGeApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = Sugar ( __name__ , title = \"YangGeApp\" , description = description , doc_version = \"0.0.1\" , terms_service = \"http://localhost/terms/\" , contact = { \"name\" : \"YangGe Team\" , \"url\" : \"http://localhost/contact/\" , \"email\" : \"example@example.com\" , }, license_ = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, servers = [ { \"url\" : \"http://127.0.0.1:5000/\" , \"description\" : \"Development server\" , }, { \"url\" : \"http://localhost:5000/\" , \"description\" : \"Staging server\" , }, ], security_schemes = { \"http basic\" : { \"type\" : \"http\" , \"scheme\" : \"basic\" }, \"api key\" : { \"type\" : \"apiKey\" , \"name\" : \"api_key\" , \"in\" : \"header\" } } ) @app . get ( \"/items/\" ) def read_items (): return { \"name\" : \"YangGe\" } Tip You can write Markdown in the description field and it will be rendered in the output. With this configuration, the automatic API docs would look like:","title":"Metadata for API"},{"location":"sugar-parameters/#metadata-for-tags","text":"You can also add additional metadata for the different tags used to group your path operations with the parameter tags . It takes a list containing one dictionary for each tag. Each dictionary can contain: name ( required ): a str with the same tag name you use in the tags parameter in your path operations and Blueprint s. description : a str with a short description for the tag. It can have Markdown and will be shown in the docs UI. externalDocs : a dict describing external documentation with: description : a str with a short description for the external docs. url ( required ): a str with the URL for the external documentation.","title":"Metadata for tags"},{"location":"sugar-parameters/#create-metadata-for-tags","text":"Let's try that in an example with tags for users and items . Create metadata for your tags and pass it to the tags parameter: from flask_sugar import Sugar tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://shangsky.github.io/flask-sugar\" , }, }, ] app = Sugar ( __name__ , tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) def get_users (): return { \"users\" : [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }]} @app . get ( \"/items/\" , tags = [ \"items\" ]) def get_items (): return { \"items\" : [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }]} Notice that you can use Markdown inside of the descriptions, for example \"login\" will be shown in bold ( login ) and \"fancy\" will be shown in italics ( fancy ). Tip You don't have to add metadata for all the tags that you use.","title":"Create metadata for tags"},{"location":"sugar-parameters/#use-your-tags","text":"Use the tags parameter with your path operations (and Blueprint s) to assign them to different tags: from flask_sugar import Sugar tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://shangsky.github.io/flask-sugar\" , }, }, ] app = Sugar ( __name__ , tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) def get_users (): return { \"users\" : [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }]} @app . get ( \"/items/\" , tags = [ \"items\" ]) def get_items (): return { \"items\" : [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }]}","title":"Use your tags"},{"location":"sugar-parameters/#check-the-docs","text":"Now, if you check the docs, they will show all the additional metadata:","title":"Check the docs"},{"location":"sugar-parameters/#order-of-tags","text":"The order of each tag metadata dictionary also defines the order shown in the docs UI. For example, even though users would go after items in alphabetical order, it is shown before them, because we added their metadata as the first dictionary in the list.","title":"Order of tags"},{"location":"sugar-parameters/#docs-url-parameters","text":"Parameter Type Description openapi_url_prefix str The prefix of the api documentation. example: openapi_url_prefix=/abc , you should visit the doct at /abc/doc and /abc/redoc . openapi_json_url str The url of openapi.json, if openapi_json_url=None , api doc will close swagger_url str The url of the swagger doc. redoc_url str The url of the redoc. swagger_js_url str The staic js file url of swagger ui. swagger_css_url str The staic css file url of swagger ui. redoc_js_url str The staic js file url of redoc.","title":"Docs Url Parameters"},{"location":"params/cookie-params/","text":"Cookie Parameters You can define Cookie parameters the same way you define Query and Path parameters. Import Cookie First import Cookie : from typing import Optional from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( cookie_value : Optional [ str ] = Cookie ( None )): return { \"cookie_value\" : cookie_value } Declare Cookie parameters Then declare the cookie parameters using the same structure as with Path and Query . The first value is the default value, you can pass all the extra validation or annotation parameters: from typing import Optional from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( cookie_value : Optional [ str ] = Cookie ( None )): return { \"cookie_value\" : cookie_value } Technical Details Cookie is a \"sister\" class of Path and Query . It also inherits from the same common Param class. But remember that when you import Query , Path , Cookie and others from flask_sugar , those are actually functions that return special classes. Info To declare cookies, you need to use Cookie , because otherwise the parameters would be interpreted as query parameters. List cookies It is possible to receive a cookie with multiple values. You can define those cases using a list in the type declaration. You will split the value in the cookie into a Python list . For example, to declare a cookie values with multiple values, you can write: from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( values : List [ str ] = Cookie ( None )): return { \"values\" : values } If you communicate with that path operation sending a cookie like: values: foo,bar The response would be like: { \"values\" : [ \"bar\" , \"foo\" ] } Recap Declare cookies with Cookie , using the same common pattern as Query and Path .","title":"Cookie Parameters"},{"location":"params/cookie-params/#cookie-parameters","text":"You can define Cookie parameters the same way you define Query and Path parameters.","title":"Cookie Parameters"},{"location":"params/cookie-params/#import-cookie","text":"First import Cookie : from typing import Optional from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( cookie_value : Optional [ str ] = Cookie ( None )): return { \"cookie_value\" : cookie_value }","title":"Import Cookie"},{"location":"params/cookie-params/#declare-cookie-parameters","text":"Then declare the cookie parameters using the same structure as with Path and Query . The first value is the default value, you can pass all the extra validation or annotation parameters: from typing import Optional from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( cookie_value : Optional [ str ] = Cookie ( None )): return { \"cookie_value\" : cookie_value } Technical Details Cookie is a \"sister\" class of Path and Query . It also inherits from the same common Param class. But remember that when you import Query , Path , Cookie and others from flask_sugar , those are actually functions that return special classes. Info To declare cookies, you need to use Cookie , because otherwise the parameters would be interpreted as query parameters.","title":"Declare Cookie parameters"},{"location":"params/cookie-params/#list-cookies","text":"It is possible to receive a cookie with multiple values. You can define those cases using a list in the type declaration. You will split the value in the cookie into a Python list . For example, to declare a cookie values with multiple values, you can write: from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( values : List [ str ] = Cookie ( None )): return { \"values\" : values } If you communicate with that path operation sending a cookie like: values: foo,bar The response would be like: { \"values\" : [ \"bar\" , \"foo\" ] }","title":"List cookies"},{"location":"params/cookie-params/#recap","text":"Declare cookies with Cookie , using the same common pattern as Query and Path .","title":"Recap"},{"location":"params/file-uploads/","text":"File Uploads You can define files to be uploaded by the client using File . Import File Import File and UploadFile from flask_sugar : from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( file : UploadFile = File ( ... )): return { \"filename\" : file . filename } Define File parameters Create file parameters the same way you would for Cookie or Header : from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( file : UploadFile = File ( ... )): return { \"filename\" : file . filename } UploadFile UploadFile is an alias to werkzeug.datastructures.FileStorage, it has the following attributes: filename name stream content_type content_length mimetype mimetype_params save(dst, buffer_size=16384) close() What is \"Form Data\" The way HTML forms ( <form></form> ) sends the data to the server normally uses a \"special\" encoding for that data, it's different from JSON. Flask Sugar will make sure to read that data from the right place instead of JSON. Technical Details Data from forms is normally encoded using the \"media type\" application/x-www-form-urlencoded when it doesn't include files. But when the form includes files, it is encoded as multipart/form-data . If you use File , Flask Sugar will know it has to get the files from the correct part of the body. If you want to read more about these encodings and form fields, head to the MDN web docs for POST . Warning You can declare multiple File and Form parameters in a path operation , but you can't also declare Body fields that you expect to receive as JSON, as the request will have the body encoded using multipart/form-data instead of application/json . This is not a limitation of Flask Sugar , it's part of the HTTP protocol. Multiple file uploads It's possible to upload several files at the same time. They would be associated to the same \"form field\" sent using \"form data\". To use that, declare a List of UploadFile : from typing import List from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( files : List [ UploadFile ] = File ( ... )): return { \"filenames\" : [ file . filename for file in files ]} You will receive, as declared, a list of UploadFile s. Recap Use File to declare files to be uploaded as input parameters (as form data).","title":"File Uploads"},{"location":"params/file-uploads/#file-uploads","text":"You can define files to be uploaded by the client using File .","title":"File Uploads"},{"location":"params/file-uploads/#import-file","text":"Import File and UploadFile from flask_sugar : from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( file : UploadFile = File ( ... )): return { \"filename\" : file . filename }","title":"Import File"},{"location":"params/file-uploads/#define-file-parameters","text":"Create file parameters the same way you would for Cookie or Header : from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( file : UploadFile = File ( ... )): return { \"filename\" : file . filename }","title":"Define File parameters"},{"location":"params/file-uploads/#uploadfile","text":"UploadFile is an alias to werkzeug.datastructures.FileStorage, it has the following attributes: filename name stream content_type content_length mimetype mimetype_params save(dst, buffer_size=16384) close()","title":"UploadFile"},{"location":"params/file-uploads/#what-is-form-data","text":"The way HTML forms ( <form></form> ) sends the data to the server normally uses a \"special\" encoding for that data, it's different from JSON. Flask Sugar will make sure to read that data from the right place instead of JSON. Technical Details Data from forms is normally encoded using the \"media type\" application/x-www-form-urlencoded when it doesn't include files. But when the form includes files, it is encoded as multipart/form-data . If you use File , Flask Sugar will know it has to get the files from the correct part of the body. If you want to read more about these encodings and form fields, head to the MDN web docs for POST . Warning You can declare multiple File and Form parameters in a path operation , but you can't also declare Body fields that you expect to receive as JSON, as the request will have the body encoded using multipart/form-data instead of application/json . This is not a limitation of Flask Sugar , it's part of the HTTP protocol.","title":"What is \"Form Data\""},{"location":"params/file-uploads/#multiple-file-uploads","text":"It's possible to upload several files at the same time. They would be associated to the same \"form field\" sent using \"form data\". To use that, declare a List of UploadFile : from typing import List from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( files : List [ UploadFile ] = File ( ... )): return { \"filenames\" : [ file . filename for file in files ]} You will receive, as declared, a list of UploadFile s.","title":"Multiple file uploads"},{"location":"params/file-uploads/#recap","text":"Use File to declare files to be uploaded as input parameters (as form data).","title":"Recap"},{"location":"params/form-data/","text":"Form Data When you need to receive form fields instead of JSON, you can use Form . Import Form Import Form from flask_sugar : from flask_sugar import Sugar , Form from pydantic import BaseModel app = Sugar ( __name__ ) class LoginInfo ( BaseModel ): username : str password : str @app . post ( \"/login\" ) def login ( login_info : LoginInfo = Form ( ... )): return { \"username\" : login_info . username } Define Form parameters from flask_sugar import Sugar , Form from pydantic import BaseModel app = Sugar ( __name__ ) class LoginInfo ( BaseModel ): username : str password : str @app . post ( \"/login\" ) def login ( login_info : LoginInfo = Form ( ... )): return { \"username\" : login_info . username } For example, in one of the ways the OAuth2 specification can be used (called \"password flow\") it is required to send a username and password as form fields. The spec requires the fields to be exactly named username and password , and to be sent as form fields, not JSON. With Form you can declare the same metadata and validation as with Body Info Form is a class that inherits directly from Body . Tip To declare form bodies, you need to use Form explicitly, because without it the parameters would be interpreted as query parameters or body (JSON) parameters. About \"Form Fields\" The way HTML forms ( <form></form> ) sends the data to the server normally uses a \"special\" encoding for that data, it's different from JSON. Flask Sugar will make sure to read that data from the right place instead of JSON. Technical Details Data from forms is normally encoded using the \"media type\" application/x-www-form-urlencoded . But when the form includes files, it is encoded as multipart/form-data . You'll read about handling files in the next chapter. If you want to read more about these encodings and form fields, head to the MDN web docs for POST . Warning You can declare multiple Form parameters in a path operation , but you can't also declare Body fields that you expect to receive as JSON, as the request will have the body encoded using application/x-www-form-urlencoded instead of application/json . This is not a limitation of Flask Sugar , it's part of the HTTP protocol. Recap Use Form to declare form data input parameters.","title":"Form Data"},{"location":"params/form-data/#form-data","text":"When you need to receive form fields instead of JSON, you can use Form .","title":"Form Data"},{"location":"params/form-data/#import-form","text":"Import Form from flask_sugar : from flask_sugar import Sugar , Form from pydantic import BaseModel app = Sugar ( __name__ ) class LoginInfo ( BaseModel ): username : str password : str @app . post ( \"/login\" ) def login ( login_info : LoginInfo = Form ( ... )): return { \"username\" : login_info . username }","title":"Import Form"},{"location":"params/form-data/#define-form-parameters","text":"from flask_sugar import Sugar , Form from pydantic import BaseModel app = Sugar ( __name__ ) class LoginInfo ( BaseModel ): username : str password : str @app . post ( \"/login\" ) def login ( login_info : LoginInfo = Form ( ... )): return { \"username\" : login_info . username } For example, in one of the ways the OAuth2 specification can be used (called \"password flow\") it is required to send a username and password as form fields. The spec requires the fields to be exactly named username and password , and to be sent as form fields, not JSON. With Form you can declare the same metadata and validation as with Body Info Form is a class that inherits directly from Body . Tip To declare form bodies, you need to use Form explicitly, because without it the parameters would be interpreted as query parameters or body (JSON) parameters.","title":"Define Form parameters"},{"location":"params/form-data/#about-form-fields","text":"The way HTML forms ( <form></form> ) sends the data to the server normally uses a \"special\" encoding for that data, it's different from JSON. Flask Sugar will make sure to read that data from the right place instead of JSON. Technical Details Data from forms is normally encoded using the \"media type\" application/x-www-form-urlencoded . But when the form includes files, it is encoded as multipart/form-data . You'll read about handling files in the next chapter. If you want to read more about these encodings and form fields, head to the MDN web docs for POST . Warning You can declare multiple Form parameters in a path operation , but you can't also declare Body fields that you expect to receive as JSON, as the request will have the body encoded using application/x-www-form-urlencoded instead of application/json . This is not a limitation of Flask Sugar , it's part of the HTTP protocol.","title":"About \"Form Fields\""},{"location":"params/form-data/#recap","text":"Use Form to declare form data input parameters.","title":"Recap"},{"location":"params/header-params/","text":"Header Parameters You can define Header parameters the same way you define Query , Path and Cookie parameters. Import Header First import Header : from typing import Optional from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( user_agent : Optional [ str ] = Header ( None )): return { \"user_agent\" : user_agent } Declare Header parameters Then declare the header parameters using the same structure as with Path , Query and Cookie . The first value is the default value, you can pass all the extra validation or annotation parameters: from typing import Optional from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( user_agent : Optional [ str ] = Header ( None )): return { \"user_agent\" : user_agent } Technical Details Header is a \"sister\" class of Path , Query and Cookie . It also inherits from the same common Param class. But remember that when you import Query , Path , Header , and others from flask_sugar , those are actually functions that return special classes. Info To declare headers, you need to use Header , because otherwise the parameters would be interpreted as query parameters. Automatic conversion Header has a little extra functionality on top of what Path , Query and Cookie provide. Most of the standard headers are separated by a \"hyphen\" character, also known as the \"minus symbol\" ( - ). But a variable like user-agent is invalid in Python. So, by default, Header will convert the parameter names characters from underscore ( _ ) to hyphen ( - ) to extract and document the headers. Also, HTTP headers are case-insensitive, so, you can declare them with standard Python style (also known as \"snake_case\"). So, you can use user_agent as you normally would in Python code, instead of needing to capitalize the first letters as User_Agent or something similar. List headers It is possible to receive a header with multiple values. You can define those cases using a list in the type declaration. You will split the value in the header into a Python list . For example, to declare a header values with multiple values, you can write: from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( x_token : List [ str ] = Header ( None )): return { \"X-Token values\" : x_token } If you communicate with that path operation sending a HTTP headers like: X-Token: foo,bar The response would be like: { \"X-Token values\" : [ \"bar\" , \"foo\" ] } Recap Declare headers with Header , using the same common pattern as Query , Path and Cookie . And don't worry about underscores in your variables, FLask Sugar will take care of converting them.","title":"Header Parameters"},{"location":"params/header-params/#header-parameters","text":"You can define Header parameters the same way you define Query , Path and Cookie parameters.","title":"Header Parameters"},{"location":"params/header-params/#import-header","text":"First import Header : from typing import Optional from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( user_agent : Optional [ str ] = Header ( None )): return { \"user_agent\" : user_agent }","title":"Import Header"},{"location":"params/header-params/#declare-header-parameters","text":"Then declare the header parameters using the same structure as with Path , Query and Cookie . The first value is the default value, you can pass all the extra validation or annotation parameters: from typing import Optional from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( user_agent : Optional [ str ] = Header ( None )): return { \"user_agent\" : user_agent } Technical Details Header is a \"sister\" class of Path , Query and Cookie . It also inherits from the same common Param class. But remember that when you import Query , Path , Header , and others from flask_sugar , those are actually functions that return special classes. Info To declare headers, you need to use Header , because otherwise the parameters would be interpreted as query parameters.","title":"Declare Header parameters"},{"location":"params/header-params/#automatic-conversion","text":"Header has a little extra functionality on top of what Path , Query and Cookie provide. Most of the standard headers are separated by a \"hyphen\" character, also known as the \"minus symbol\" ( - ). But a variable like user-agent is invalid in Python. So, by default, Header will convert the parameter names characters from underscore ( _ ) to hyphen ( - ) to extract and document the headers. Also, HTTP headers are case-insensitive, so, you can declare them with standard Python style (also known as \"snake_case\"). So, you can use user_agent as you normally would in Python code, instead of needing to capitalize the first letters as User_Agent or something similar.","title":"Automatic conversion"},{"location":"params/header-params/#list-headers","text":"It is possible to receive a header with multiple values. You can define those cases using a list in the type declaration. You will split the value in the header into a Python list . For example, to declare a header values with multiple values, you can write: from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( x_token : List [ str ] = Header ( None )): return { \"X-Token values\" : x_token } If you communicate with that path operation sending a HTTP headers like: X-Token: foo,bar The response would be like: { \"X-Token values\" : [ \"bar\" , \"foo\" ] }","title":"List headers"},{"location":"params/header-params/#recap","text":"Declare headers with Header , using the same common pattern as Query , Path and Cookie . And don't worry about underscores in your variables, FLask Sugar will take care of converting them.","title":"Recap"},{"location":"params/path-params/","text":"Path Parameters Validation of sugar from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/<a>/<b>\" ) def add_num ( a : int , b : int ): return { \"result\" : a + b } If your path parameters do not meet the rules, you will get a response like this { \"detail\" : [ [ { \"loc\" : [ \"a\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" }, { \"loc\" : [ \"b\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] ] } Validation of flask from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<int:b>\" ) def add_num ( a , b ): return { \"result\" : a + b } If your path parameters do not meet the rules, you will get a not found response Enumerate Parameters you can use literal to check the parameters from flask_sugar import Sugar from typing_extensions import Literal app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<int:b>\" ) def add_num ( a : Literal [ 1 , 3 , 5 ], b : int ): return { \"result\" : a + b } In this example, value of a must in [1, 3, 5] More validation by pydantic from flask_sugar import Sugar , Path app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<string:b>\" ) def multi_str ( a : int = Path ( ... , gt = 3 ), b : str = Path ( ... , max_length = 4 )): return { \"result\" : a * b } In this example, value of a must greater than 3, length of b must greater than 4 OpenAPI Documentation Now, when you open your browser at http://localhost:5000/doc , you will see the automatic, interactive, API documentation.","title":"Path Parameters"},{"location":"params/path-params/#path-parameters","text":"","title":"Path Parameters"},{"location":"params/path-params/#validation-of-sugar","text":"from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/<a>/<b>\" ) def add_num ( a : int , b : int ): return { \"result\" : a + b } If your path parameters do not meet the rules, you will get a response like this { \"detail\" : [ [ { \"loc\" : [ \"a\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" }, { \"loc\" : [ \"b\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] ] }","title":"Validation of sugar"},{"location":"params/path-params/#validation-of-flask","text":"from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<int:b>\" ) def add_num ( a , b ): return { \"result\" : a + b } If your path parameters do not meet the rules, you will get a not found response","title":"Validation of flask"},{"location":"params/path-params/#enumerate-parameters","text":"you can use literal to check the parameters from flask_sugar import Sugar from typing_extensions import Literal app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<int:b>\" ) def add_num ( a : Literal [ 1 , 3 , 5 ], b : int ): return { \"result\" : a + b } In this example, value of a must in [1, 3, 5]","title":"Enumerate Parameters"},{"location":"params/path-params/#more-validation-by-pydantic","text":"from flask_sugar import Sugar , Path app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<string:b>\" ) def multi_str ( a : int = Path ( ... , gt = 3 ), b : str = Path ( ... , max_length = 4 )): return { \"result\" : a * b } In this example, value of a must greater than 3, length of b must greater than 4","title":"More validation by pydantic"},{"location":"params/path-params/#openapi-documentation","text":"Now, when you open your browser at http://localhost:5000/doc , you will see the automatic, interactive, API documentation.","title":"OpenAPI Documentation"},{"location":"params/query-params/","text":"Query Parameters When you declare other function parameters that are not part of the path parameters, they are automatically interpreted as \"query\" parameters. nums = list ( range ( 100 )) @app . get ( \"/nums\" ) def get_nums ( limit : int = 10 , offset : int = 0 ): return { \"results\" : nums [ offset : offset + limit ]} To query this operation, you use a URL like: http://localhost:5000/nums?offset=0&limit=10 By default, all GET parameters are strings, and when you annotate your function arguments with types, they are converted to that type and validated against it. The same benefits that apply to path parameters also apply to query parameters: Editor support (obviously) Data \"parsing\" Data validation Automatic documentation Note: if you do not annotate your arguments, they will be treated as str types: @app . get ( \"/nums\" ) def get_nums ( limit , offset ): # type(limit) == str # type(offset) == str Defaults As query parameters are not a fixed part of a path, they are optional and can have default values: @app . get ( \"/nums\" ) def get_nums ( limit : int = 10 , offset : int = 0 ): return nums [ offset : offset + limit ] In the example above we set default values of offset=0 and limit=10 . So, going to the URL: http://localhost:5000/nums would be the same as going to: http://localhost:5000/nums?offset=0&limit=10 If you go to, for example: http://localhost:5000/nums?offset=20 the parameter values in your function will be: offset=20 (because you set it in the URL) limit=10 (because that was the default value) Required and optional parameters You can declare required or optional GET parameters in the same way as declaring Python function arguments: nums = list ( range ( 100 )) @app . get ( \"/nums\" ) def get_nums ( greater_than : int , offset : int = 10 ): results = [ num for num in nums if num > greater_than ] return { \"results\" : results [ offset : offset + 10 ]} In this case, Flask Sugar will always validate that you pass the greater_than param in the GET, and the offset param is an optional integer. More validation by pydantic from flask_sugar import Sugar , Query app = Sugar ( __name__ ) @app . get ( \"/nums\" ) def get_nums ( limit : Optional [ int ] = Query ( default = 10 , le = 25 ), offset : Optional [ int ] = Query ( default = 0 )): return nums [ offset : offset + limit ] In the example above we set default values of offset=0 and limit=10 , and Flask Sugar will always validate the limit must be less than or equal to 25. GET parameters type conversion Let's declare multiple type arguments: from datetime import date @app . get ( \"/example\" ) def example ( s : str = None , b : bool = None , d : date = None , i : int = None ): return { \"value\" : [ s , b , d , i ]} The str type is passed as is. For the bool type, all the following: http://localhost:5000/example?b=1 http://localhost:5000/example?b=True http://localhost:5000/example?b=true http://localhost:5000/example?b=on http://localhost:5000/example?b=yes or any other case variation (uppercase, first letter in uppercase, etc), your function will see the parameter b with a bool value of True , otherwise as False . Date can be both date string and integer (unix timestamp): http://localhost:5000/example?d=1577836800 # same as 2020-01-01 http://localhost:5000/example?d=2020-01-01","title":"Query Parameters"},{"location":"params/query-params/#query-parameters","text":"When you declare other function parameters that are not part of the path parameters, they are automatically interpreted as \"query\" parameters. nums = list ( range ( 100 )) @app . get ( \"/nums\" ) def get_nums ( limit : int = 10 , offset : int = 0 ): return { \"results\" : nums [ offset : offset + limit ]} To query this operation, you use a URL like: http://localhost:5000/nums?offset=0&limit=10 By default, all GET parameters are strings, and when you annotate your function arguments with types, they are converted to that type and validated against it. The same benefits that apply to path parameters also apply to query parameters: Editor support (obviously) Data \"parsing\" Data validation Automatic documentation Note: if you do not annotate your arguments, they will be treated as str types: @app . get ( \"/nums\" ) def get_nums ( limit , offset ): # type(limit) == str # type(offset) == str","title":"Query Parameters"},{"location":"params/query-params/#defaults","text":"As query parameters are not a fixed part of a path, they are optional and can have default values: @app . get ( \"/nums\" ) def get_nums ( limit : int = 10 , offset : int = 0 ): return nums [ offset : offset + limit ] In the example above we set default values of offset=0 and limit=10 . So, going to the URL: http://localhost:5000/nums would be the same as going to: http://localhost:5000/nums?offset=0&limit=10 If you go to, for example: http://localhost:5000/nums?offset=20 the parameter values in your function will be: offset=20 (because you set it in the URL) limit=10 (because that was the default value)","title":"Defaults"},{"location":"params/query-params/#required-and-optional-parameters","text":"You can declare required or optional GET parameters in the same way as declaring Python function arguments: nums = list ( range ( 100 )) @app . get ( \"/nums\" ) def get_nums ( greater_than : int , offset : int = 10 ): results = [ num for num in nums if num > greater_than ] return { \"results\" : results [ offset : offset + 10 ]} In this case, Flask Sugar will always validate that you pass the greater_than param in the GET, and the offset param is an optional integer.","title":"Required and optional parameters"},{"location":"params/query-params/#more-validation-by-pydantic","text":"from flask_sugar import Sugar , Query app = Sugar ( __name__ ) @app . get ( \"/nums\" ) def get_nums ( limit : Optional [ int ] = Query ( default = 10 , le = 25 ), offset : Optional [ int ] = Query ( default = 0 )): return nums [ offset : offset + limit ] In the example above we set default values of offset=0 and limit=10 , and Flask Sugar will always validate the limit must be less than or equal to 25.","title":"More validation by pydantic"},{"location":"params/query-params/#get-parameters-type-conversion","text":"Let's declare multiple type arguments: from datetime import date @app . get ( \"/example\" ) def example ( s : str = None , b : bool = None , d : date = None , i : int = None ): return { \"value\" : [ s , b , d , i ]} The str type is passed as is. For the bool type, all the following: http://localhost:5000/example?b=1 http://localhost:5000/example?b=True http://localhost:5000/example?b=true http://localhost:5000/example?b=on http://localhost:5000/example?b=yes or any other case variation (uppercase, first letter in uppercase, etc), your function will see the parameter b with a bool value of True , otherwise as False . Date can be both date string and integer (unix timestamp): http://localhost:5000/example?d=1577836800 # same as 2020-01-01 http://localhost:5000/example?d=2020-01-01","title":"GET parameters type conversion"},{"location":"params/request-body/","text":"Request Body When you need to send data from a client (let's say, a browser) to your API, you send it as a request body . A request body is data sent by the client to your API. A response body is the data your API sends to the client. Your API almost always has to send a response body. But clients don't necessarily need to send request bodies all the time. To declare a request body, you use Pydantic models with all their power and benefits. Import Pydantic's BaseModel First, you need to import BaseModel from pydantic : from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item Create your data model Then you declare your data model as a class that inherits from BaseModel . Use standard Python types for all the attributes: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item The same as when declaring query parameters, when a model attribute has a default value, it is not required. Otherwise, it is required. Use None to make it just optional. For example, this model above declares a JSON \" object \" (or Python dict ) like: { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } ...as description and tax are optional (with a default value of None ), this JSON \" object \" would also be valid: { \"name\" : \"Foo\" , \"price\" : 45.2 } Declare it as a parameter To add it to your path operation , declare it the same way you declared path and query parameters: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item ...and declare its type as the model you created, Item . Results With just that Python type declaration, Flask Sugar will: Read the body of the request as JSON. Convert the corresponding types (if needed). Validate the data. If the data is invalid, it will return a nice and clear error, indicating exactly where and what was the incorrect data. Give you the received data in the parameter item . As you declared it in the function to be of type Item , you will also have all the editor support (completion, etc) for all of the attributes and their types. Generate JSON Schema definitions for your model, you can also use them anywhere else you like if it makes sense for your project. Those schemas will be part of the generated OpenAPI schema, and used by the automatic documentation UIs . Automatic docs The JSON Schemas of your models will be part of your OpenAPI generated schema, and will be shown in the interactive API docs: And will be also used in the API docs inside each path operation that needs them: Use the model Inside of the function, you can access all the attributes of the model object directly: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict Request body + path parameters You can declare path parameters and request body at the same time. Flask Sugar will recognize that the function parameters that match path parameters should be taken from the path , and that function parameters that are declared to be Pydantic models should be taken from the request body . from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . put ( \"/items/<item_id>\" ) def create ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()} Request body + path + query parameters You can also declare body , path and query parameters, all at the same time. Flask Sugar will recognize each of them and take the data from the correct place. from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/<item_id>\" ) def create ( item_id : int , item : Item , q : Optional [ str ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result The function parameters will be recognized as follows: If the parameter is also declared in the path , it will be used as a path parameter. If the parameter is of a singular type (like int , float , str , bool , etc) it will be interpreted as a query parameter. If the parameter is declared to be of the type of a Pydantic model , it will be interpreted as a request body . Note Flask Sugar will know that the value of q is not required because of the default value = None . The Optional in Optional[str] is not used by Flask Sugar, but will allow your editor to give you better support and detect errors.","title":"Request Body"},{"location":"params/request-body/#request-body","text":"When you need to send data from a client (let's say, a browser) to your API, you send it as a request body . A request body is data sent by the client to your API. A response body is the data your API sends to the client. Your API almost always has to send a response body. But clients don't necessarily need to send request bodies all the time. To declare a request body, you use Pydantic models with all their power and benefits.","title":"Request Body"},{"location":"params/request-body/#import-pydantics-basemodel","text":"First, you need to import BaseModel from pydantic : from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item","title":"Import Pydantic's BaseModel"},{"location":"params/request-body/#create-your-data-model","text":"Then you declare your data model as a class that inherits from BaseModel . Use standard Python types for all the attributes: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item The same as when declaring query parameters, when a model attribute has a default value, it is not required. Otherwise, it is required. Use None to make it just optional. For example, this model above declares a JSON \" object \" (or Python dict ) like: { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } ...as description and tax are optional (with a default value of None ), this JSON \" object \" would also be valid: { \"name\" : \"Foo\" , \"price\" : 45.2 }","title":"Create your data model"},{"location":"params/request-body/#declare-it-as-a-parameter","text":"To add it to your path operation , declare it the same way you declared path and query parameters: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item ...and declare its type as the model you created, Item .","title":"Declare it as a parameter"},{"location":"params/request-body/#results","text":"With just that Python type declaration, Flask Sugar will: Read the body of the request as JSON. Convert the corresponding types (if needed). Validate the data. If the data is invalid, it will return a nice and clear error, indicating exactly where and what was the incorrect data. Give you the received data in the parameter item . As you declared it in the function to be of type Item , you will also have all the editor support (completion, etc) for all of the attributes and their types. Generate JSON Schema definitions for your model, you can also use them anywhere else you like if it makes sense for your project. Those schemas will be part of the generated OpenAPI schema, and used by the automatic documentation UIs .","title":"Results"},{"location":"params/request-body/#automatic-docs","text":"The JSON Schemas of your models will be part of your OpenAPI generated schema, and will be shown in the interactive API docs: And will be also used in the API docs inside each path operation that needs them:","title":"Automatic docs"},{"location":"params/request-body/#use-the-model","text":"Inside of the function, you can access all the attributes of the model object directly: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict","title":"Use the model"},{"location":"params/request-body/#request-body-path-parameters","text":"You can declare path parameters and request body at the same time. Flask Sugar will recognize that the function parameters that match path parameters should be taken from the path , and that function parameters that are declared to be Pydantic models should be taken from the request body . from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . put ( \"/items/<item_id>\" ) def create ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()}","title":"Request body + path parameters"},{"location":"params/request-body/#request-body-path-query-parameters","text":"You can also declare body , path and query parameters, all at the same time. Flask Sugar will recognize each of them and take the data from the correct place. from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/<item_id>\" ) def create ( item_id : int , item : Item , q : Optional [ str ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result The function parameters will be recognized as follows: If the parameter is also declared in the path , it will be used as a path parameter. If the parameter is of a singular type (like int , float , str , bool , etc) it will be interpreted as a query parameter. If the parameter is declared to be of the type of a Pydantic model , it will be interpreted as a request body . Note Flask Sugar will know that the value of q is not required because of the default value = None . The Optional in Optional[str] is not used by Flask Sugar, but will allow your editor to give you better support and detect errors.","title":"Request body + path + query parameters"},{"location":"zh/","text":"Flask Sugar Flask Sugar\u662f\u4e00\u4e2a\u57fa\u4e8eflask, pyddantic\u548c\u7c7b\u578b\u6ce8\u89e3\u7684API\u6846\u67b6. \u53ef\u4ee5\u68c0\u67e5\u53c2\u6570\u5e76\u81ea\u52a8\u751f\u6210API\u6587\u6863 \u6587\u6863: https://shangsky.github.io/flask-sugar \u6216 https://flask-sugar.vercel.app/ \u6e90\u7801: https://github.com/shangsky/flask-sugar \u4f9d\u8d56 Python 3.6+ Flask 2.0+ \u5b89\u88c5 $ pip install flask-sugar \u4f8b\u5b50 # \u4fdd\u5b58\u4e3aapp.py from flask_sugar import Sugar , Header from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str size : int class Resp ( BaseModel ): a : int b : str c : str item : Item @app . post ( \"/item/<a>\" ) def demo ( a : int , # \u8def\u5f84\u53c2\u6570 item : Item , # \u8bf7\u6c42\u4f53json\u53c2\u6570 b : str = \"default_query_param_b\" , # \u67e5\u8be2\u53c2\u6570 c : str = Header ( \"default_header_param_b\" ), # \u8bf7\u6c42\u5934\u53c2\u6570 ) -> Resp : \"\"\"demo page\"\"\" return Resp ( a = a , b = b , c = c , item = item ) $ flask run --reload * Running on http://127.0.0.1:5000/ ( Press CTRL+C to quit ) \u73b0\u5728\u8bbf\u95eeswagger\u6587\u6863\u5730\u5740 http://localhost:5000/doc: \u8bbf\u95eeRedoc\u6587\u6863\u5730\u5740 http://localhost:5000/redoc: \u8bb8\u53ef\u8bc1 \u6b64\u9879\u76ee\u4f7f\u7528MIT\u8bb8\u53ef\u8bc1.","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"zh/#flask-sugar","text":"Flask Sugar\u662f\u4e00\u4e2a\u57fa\u4e8eflask, pyddantic\u548c\u7c7b\u578b\u6ce8\u89e3\u7684API\u6846\u67b6. \u53ef\u4ee5\u68c0\u67e5\u53c2\u6570\u5e76\u81ea\u52a8\u751f\u6210API\u6587\u6863 \u6587\u6863: https://shangsky.github.io/flask-sugar \u6216 https://flask-sugar.vercel.app/ \u6e90\u7801: https://github.com/shangsky/flask-sugar","title":"Flask Sugar"},{"location":"zh/#_1","text":"Python 3.6+ Flask 2.0+","title":"\u4f9d\u8d56"},{"location":"zh/#_2","text":"$ pip install flask-sugar","title":"\u5b89\u88c5"},{"location":"zh/#_3","text":"# \u4fdd\u5b58\u4e3aapp.py from flask_sugar import Sugar , Header from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str size : int class Resp ( BaseModel ): a : int b : str c : str item : Item @app . post ( \"/item/<a>\" ) def demo ( a : int , # \u8def\u5f84\u53c2\u6570 item : Item , # \u8bf7\u6c42\u4f53json\u53c2\u6570 b : str = \"default_query_param_b\" , # \u67e5\u8be2\u53c2\u6570 c : str = Header ( \"default_header_param_b\" ), # \u8bf7\u6c42\u5934\u53c2\u6570 ) -> Resp : \"\"\"demo page\"\"\" return Resp ( a = a , b = b , c = c , item = item ) $ flask run --reload * Running on http://127.0.0.1:5000/ ( Press CTRL+C to quit ) \u73b0\u5728\u8bbf\u95eeswagger\u6587\u6863\u5730\u5740 http://localhost:5000/doc: \u8bbf\u95eeRedoc\u6587\u6863\u5730\u5740 http://localhost:5000/redoc:","title":"\u4f8b\u5b50"},{"location":"zh/#_4","text":"\u6b64\u9879\u76ee\u4f7f\u7528MIT\u8bb8\u53ef\u8bc1.","title":"\u8bb8\u53ef\u8bc1"},{"location":"zh/doc-route-filter/","text":"\u6587\u6863\u8def\u7531\u8fc7\u6ee4\u5668 \u4f60\u53ef\u4ee5\u4f7f\u7528doc_route_filter\uff0c\u6765\u8fc7\u6ee4\u548c\u8bbe\u7f6e\u8def\u7531\u76f8\u5173\u7684\u5c5e\u6027 \u4f8b\u5b50 \u8fc7\u6ee4\u6389 /b \u5f00\u5934\u7684\u8def\u7531 from flask_sugar import Sugar app = Sugar ( __name__ , doc_route_filter = lambda view , rule : not rule . rule . startswith ( \"/b\" )) @app . get ( \"/a/1\" ) def a1 (): return \"a1\" @app . get ( \"/b/1\" ) def b1 (): return \"a2\"","title":"\u6587\u6863\u8def\u7531\u8fc7\u6ee4\u5668"},{"location":"zh/doc-route-filter/#_1","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528doc_route_filter\uff0c\u6765\u8fc7\u6ee4\u548c\u8bbe\u7f6e\u8def\u7531\u76f8\u5173\u7684\u5c5e\u6027","title":"\u6587\u6863\u8def\u7531\u8fc7\u6ee4\u5668"},{"location":"zh/doc-route-filter/#_2","text":"\u8fc7\u6ee4\u6389 /b \u5f00\u5934\u7684\u8def\u7531 from flask_sugar import Sugar app = Sugar ( __name__ , doc_route_filter = lambda view , rule : not rule . rule . startswith ( \"/b\" )) @app . get ( \"/a/1\" ) def a1 (): return \"a1\" @app . get ( \"/b/1\" ) def b1 (): return \"a2\"","title":"\u4f8b\u5b50"},{"location":"zh/handling-errors/","text":"\u9519\u8bef\u5904\u7406 \u5982\u679c\u9700\u8981\u66f4\u6539\u9a8c\u8bc1\u9519\u8bef\u7684\u9ed8\u8ba4\u8f93\u51fa\uff0c\u53ef\u4ee5\u8986\u76d6RequestValidationError\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff1a from flask_sugar import Sugar , RequestValidationError app = Sugar ( __name__ ) @app . errorhandler ( RequestValidationError ) def error_handle ( e : RequestValidationError ): return { \"detail\" : e . errors }","title":"\u9519\u8bef\u5904\u7406"},{"location":"zh/handling-errors/#_1","text":"\u5982\u679c\u9700\u8981\u66f4\u6539\u9a8c\u8bc1\u9519\u8bef\u7684\u9ed8\u8ba4\u8f93\u51fa\uff0c\u53ef\u4ee5\u8986\u76d6RequestValidationError\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff1a from flask_sugar import Sugar , RequestValidationError app = Sugar ( __name__ ) @app . errorhandler ( RequestValidationError ) def error_handle ( e : RequestValidationError ): return { \"detail\" : e . errors }","title":"\u9519\u8bef\u5904\u7406"},{"location":"zh/operation-parameters/","text":"Operations\u53c2\u6570 \u6587\u6863\u751f\u6548 \u4f60\u53ef\u4ee5\u8bbe\u7f6e doc_enable=False \u9690\u85cf\u8fd9\u4e2a\u63a5\u53e3\u7684\u6587\u6863 from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/demo1\" , doc_enable = False ) def demo1 (): return { \"code\" : 0 } @app . get ( \"/demo2\" ) def demo2 (): return { \"code\" : 0 } \u6807\u7b7e \u60a8\u53ef\u4ee5\u4f7f\u7528 tags \u53c2\u6570\uff08 list[str] \uff09\u5bf9 API \u64cd\u4f5c\u8fdb\u884c\u5206\u7ec4\u3002 from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/demo1\" ) def demo1 (): return { \"code\" : 0 } @app . get ( \"/demo2\" , tags = [ \"Hello\" ]) def demo2 (): return { \"code\" : 0 } \u5404\u79cd\u5de5\u5177\u548c\u5e93\u53ef\u80fd\u4f1a\u4ee5\u4e0d\u540c\u65b9\u5f0f\u5904\u7406\u89c6\u56fe\u51fd\u6570\u3002 \u4f8b\u5982\uff0cSwagger UI \u4f7f\u7528\u6807\u7b7e\u5bf9\u663e\u793a\u7684\u89c6\u56fe\u51fd\u6570\u8fdb\u884c\u5206\u7ec4\u3002 \u84dd\u56fe\u6807\u7b7e \u60a8\u53ef\u4ee5\u4f7f\u7528 tags \u53c2\u6570\u5c06\u6807\u7b7e\u5e94\u7528\u4e8e\u84dd\u56fe\u58f0\u660e\u7684\u6240\u6709\u89c6\u56fe\u51fd\u6570\uff0c\u8def\u7531\u7ee7\u627f\u6240\u5c5e\u84dd\u56fe\u7684\u6807\u7b7e\uff0c\u60a8\u53ef\u4ee5\u8bbe\u7f6e extends_tags=False \u7981\u7528\u5b83\uff1a from flask_sugar import Sugar , Blueprint app = Sugar ( __name__ ) hello_bp = Blueprint ( \"hello\" , __name__ , tags = [ \"world\" ]) @hello_bp . get ( \"/demo1\" ) def demo1 (): return { \"code\" : 0 } @hello_bp . get ( \"/demo2\" , extends_tags = False ) def demo2 (): return { \"code\" : 0 } app . register_blueprint ( hello_bp ) Note \u84dd\u56fe\u6807\u7b7e\u9ed8\u8ba4\u503c\u4e3a [ \u84dd\u56fe\u7684\u540d\u79f0 ] \u6458\u8981 Summary\u662f\u60a8\u7684\u64cd\u4f5c\u7684\u53ef\u8bfb\u540d\u79f0\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u662f\u901a\u8fc7\u5c06\u60a8\u7684\u89c6\u56fe\u51fd\u6570\u540d\u79f0\u5927\u5199\u751f\u6210\u7684\uff1a from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/hello/\" ) def hello ( name : str ): return { \"hello\" : name } \u5982\u679c\u60a8\u60f3\u8986\u76d6\u5b83\u6216\u5c06\u5176\u7ffb\u8bd1\u6210\u5176\u4ed6\u8bed\u8a00\uff0c\u8bf7\u4f7f\u7528 api \u88c5\u9970\u5668\u4e2d\u7684 summary \u53c2\u6570\u3002 from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/hello/\" , summary = \"Say Hello\" ) def hello ( name : str ): return { \"hello\" : name } \u63cf\u8ff0 \u5982\u679c\u60a8\u9700\u8981\u63d0\u4f9b\u6709\u5173\u89c6\u56fe\u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u4f7f\u7528 description \u53c2\u6570\u6216\u666e\u901a Python \u6587\u6863\u5b57\u7b26\u4e32\uff1a @app . get ( \"/hello/\" , description = \"say hello to any one\" ) def hello ( name : str ): return { \"hello\" : name } \u5f53\u4f60\u9700\u8981\u63d0\u4f9b\u5f88\u957f\u7684\u591a\u884c\u63cf\u8ff0\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Python docstrings \u6765\u5b9a\u4e49\u51fd\u6570\uff1a @app . get ( \"/hello/\" ) def hello ( name : str ): \"\"\" Say Hello: - hello - world \"\"\" return { \"hello\" : name } \u54cd\u5e94\u63cf\u8ff0 \u5982\u679c\u60a8\u9700\u8981\u63d0\u4f9b\u6709\u5173\u60a8\u7684\u54cd\u5e94\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u4f7f\u7528 response_description \u53c2\u6570\uff1a @app . get ( \"/hello/\" , response_description = \"Success Response\" ) def hello ( name : str ): return { \"hello\" : name } \u5df2\u5f03\u7528 \u5982\u679c\u60a8\u9700\u8981\u5c06\u89c6\u56fe\u51fd\u6570\u6807\u8bb0\u4e3a\u5df2\u5f03\u7528\u800c\u4e0d\u5c06\u5176\u5220\u9664\uff0c\u8bf7\u4f7f\u7528 deprecated \u53c2\u6570\uff1a @app . get ( \"/hello/\" , deprecated = True ) def hello ( name : str ): return { \"hello\" : name } \u5b83\u5c06\u5728 JSON Schema \u548c\u4ea4\u4e92\u5f0f OpenAPI \u6587\u6863\u4e2d\u6807\u8bb0\u4e3a\u5df2\u5f03\u7528\uff1a OperationID OpenAPI operationId \u662f\u4e00\u4e2a\u53ef\u9009\u7684\u552f\u4e00\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u6807\u8bc6\u64cd\u4f5c\u3002 \u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u4e9b ID \u5728\u60a8\u7684 API \u4e2d\u63cf\u8ff0\u7684\u6240\u6709\u64cd\u4f5c\u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cFlask Sugar \u5c06\u5176\u8bbe\u7f6e\u4e3a \u89c6\u56fe\u7684endpoint + __ + \u5c0f\u5199\u7684http\u8bf7\u6c42\u65b9\u5f0f \u3002 \u5982\u679c\u8981\u4e3a\u6bcf\u4e2a\u89c6\u56fe\u51fd\u6570\u5355\u72ec\u8bbe\u7f6e\u5b83\uff0c\u8bf7\u4f7f\u7528 operation_id \u53c2\u6570\uff1a @app . post ( \"/tasks\" , operation_id = \"create_task\" ) def new_task (): ... Security \u58f0\u660e\u54ea\u4e9b\u5b89\u5168\u673a\u5236\u53ef\u7528\u4e8e\u6b64\u64cd\u4f5c\u3002 \u503c\u5217\u8868\u5305\u62ec\u53ef\u4ee5\u4f7f\u7528\u7684\u66ff\u4ee3\u5b89\u5168\u8981\u6c42\u5bf9\u8c61\u3002 \u53ea\u9700\u6ee1\u8db3\u5176\u4e2d\u4e00\u4e2a\u5b89\u5168\u8981\u6c42\u5bf9\u8c61\u5373\u53ef\u6388\u6743\u8bf7\u6c42\u3002 \u8981\u4f7f\u5b89\u5168\u6027\u6210\u4e3a\u53ef\u9009\uff0c\u53ef\u4ee5\u5728\u6570\u7ec4\u4e2d\u5305\u542b\u4e00\u4e2a\u7a7a\u7684\u5b89\u5168\u6027\u8981\u6c42 ({})\u3002 \u6b64\u5b9a\u4e49\u8986\u76d6\u4efb\u4f55\u58f0\u660e\u7684\u9876\u7ea7\u5b89\u5168\u6027\u3002 \u8981\u5220\u9664\u9876\u7ea7\u5b89\u5168\u58f0\u660e\uff0c\u53ef\u4ee5\u4f7f\u7528\u7a7a\u6570\u7ec4\u3002 Extra \u5176\u4f59\u7684Operation\u5c5e\u6027\uff0c\u53ef\u4ee5\u8986\u76d6\u524d\u9762\u8bbe\u7f6e\u6240\u6709\u7684\u5c5e\u6027","title":"Operations\u53c2\u6570"},{"location":"zh/operation-parameters/#operations","text":"","title":"Operations\u53c2\u6570"},{"location":"zh/operation-parameters/#_1","text":"\u4f60\u53ef\u4ee5\u8bbe\u7f6e doc_enable=False \u9690\u85cf\u8fd9\u4e2a\u63a5\u53e3\u7684\u6587\u6863 from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/demo1\" , doc_enable = False ) def demo1 (): return { \"code\" : 0 } @app . get ( \"/demo2\" ) def demo2 (): return { \"code\" : 0 }","title":"\u6587\u6863\u751f\u6548"},{"location":"zh/operation-parameters/#_2","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 tags \u53c2\u6570\uff08 list[str] \uff09\u5bf9 API \u64cd\u4f5c\u8fdb\u884c\u5206\u7ec4\u3002 from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/demo1\" ) def demo1 (): return { \"code\" : 0 } @app . get ( \"/demo2\" , tags = [ \"Hello\" ]) def demo2 (): return { \"code\" : 0 } \u5404\u79cd\u5de5\u5177\u548c\u5e93\u53ef\u80fd\u4f1a\u4ee5\u4e0d\u540c\u65b9\u5f0f\u5904\u7406\u89c6\u56fe\u51fd\u6570\u3002 \u4f8b\u5982\uff0cSwagger UI \u4f7f\u7528\u6807\u7b7e\u5bf9\u663e\u793a\u7684\u89c6\u56fe\u51fd\u6570\u8fdb\u884c\u5206\u7ec4\u3002","title":"\u6807\u7b7e"},{"location":"zh/operation-parameters/#_3","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 tags \u53c2\u6570\u5c06\u6807\u7b7e\u5e94\u7528\u4e8e\u84dd\u56fe\u58f0\u660e\u7684\u6240\u6709\u89c6\u56fe\u51fd\u6570\uff0c\u8def\u7531\u7ee7\u627f\u6240\u5c5e\u84dd\u56fe\u7684\u6807\u7b7e\uff0c\u60a8\u53ef\u4ee5\u8bbe\u7f6e extends_tags=False \u7981\u7528\u5b83\uff1a from flask_sugar import Sugar , Blueprint app = Sugar ( __name__ ) hello_bp = Blueprint ( \"hello\" , __name__ , tags = [ \"world\" ]) @hello_bp . get ( \"/demo1\" ) def demo1 (): return { \"code\" : 0 } @hello_bp . get ( \"/demo2\" , extends_tags = False ) def demo2 (): return { \"code\" : 0 } app . register_blueprint ( hello_bp ) Note \u84dd\u56fe\u6807\u7b7e\u9ed8\u8ba4\u503c\u4e3a [ \u84dd\u56fe\u7684\u540d\u79f0 ]","title":"\u84dd\u56fe\u6807\u7b7e"},{"location":"zh/operation-parameters/#_4","text":"Summary\u662f\u60a8\u7684\u64cd\u4f5c\u7684\u53ef\u8bfb\u540d\u79f0\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u662f\u901a\u8fc7\u5c06\u60a8\u7684\u89c6\u56fe\u51fd\u6570\u540d\u79f0\u5927\u5199\u751f\u6210\u7684\uff1a from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/hello/\" ) def hello ( name : str ): return { \"hello\" : name } \u5982\u679c\u60a8\u60f3\u8986\u76d6\u5b83\u6216\u5c06\u5176\u7ffb\u8bd1\u6210\u5176\u4ed6\u8bed\u8a00\uff0c\u8bf7\u4f7f\u7528 api \u88c5\u9970\u5668\u4e2d\u7684 summary \u53c2\u6570\u3002 from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/hello/\" , summary = \"Say Hello\" ) def hello ( name : str ): return { \"hello\" : name }","title":"\u6458\u8981"},{"location":"zh/operation-parameters/#_5","text":"\u5982\u679c\u60a8\u9700\u8981\u63d0\u4f9b\u6709\u5173\u89c6\u56fe\u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u4f7f\u7528 description \u53c2\u6570\u6216\u666e\u901a Python \u6587\u6863\u5b57\u7b26\u4e32\uff1a @app . get ( \"/hello/\" , description = \"say hello to any one\" ) def hello ( name : str ): return { \"hello\" : name } \u5f53\u4f60\u9700\u8981\u63d0\u4f9b\u5f88\u957f\u7684\u591a\u884c\u63cf\u8ff0\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Python docstrings \u6765\u5b9a\u4e49\u51fd\u6570\uff1a @app . get ( \"/hello/\" ) def hello ( name : str ): \"\"\" Say Hello: - hello - world \"\"\" return { \"hello\" : name }","title":"\u63cf\u8ff0"},{"location":"zh/operation-parameters/#_6","text":"\u5982\u679c\u60a8\u9700\u8981\u63d0\u4f9b\u6709\u5173\u60a8\u7684\u54cd\u5e94\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u4f7f\u7528 response_description \u53c2\u6570\uff1a @app . get ( \"/hello/\" , response_description = \"Success Response\" ) def hello ( name : str ): return { \"hello\" : name }","title":"\u54cd\u5e94\u63cf\u8ff0"},{"location":"zh/operation-parameters/#_7","text":"\u5982\u679c\u60a8\u9700\u8981\u5c06\u89c6\u56fe\u51fd\u6570\u6807\u8bb0\u4e3a\u5df2\u5f03\u7528\u800c\u4e0d\u5c06\u5176\u5220\u9664\uff0c\u8bf7\u4f7f\u7528 deprecated \u53c2\u6570\uff1a @app . get ( \"/hello/\" , deprecated = True ) def hello ( name : str ): return { \"hello\" : name } \u5b83\u5c06\u5728 JSON Schema \u548c\u4ea4\u4e92\u5f0f OpenAPI \u6587\u6863\u4e2d\u6807\u8bb0\u4e3a\u5df2\u5f03\u7528\uff1a","title":"\u5df2\u5f03\u7528"},{"location":"zh/operation-parameters/#operationid","text":"OpenAPI operationId \u662f\u4e00\u4e2a\u53ef\u9009\u7684\u552f\u4e00\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u6807\u8bc6\u64cd\u4f5c\u3002 \u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u4e9b ID \u5728\u60a8\u7684 API \u4e2d\u63cf\u8ff0\u7684\u6240\u6709\u64cd\u4f5c\u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cFlask Sugar \u5c06\u5176\u8bbe\u7f6e\u4e3a \u89c6\u56fe\u7684endpoint + __ + \u5c0f\u5199\u7684http\u8bf7\u6c42\u65b9\u5f0f \u3002 \u5982\u679c\u8981\u4e3a\u6bcf\u4e2a\u89c6\u56fe\u51fd\u6570\u5355\u72ec\u8bbe\u7f6e\u5b83\uff0c\u8bf7\u4f7f\u7528 operation_id \u53c2\u6570\uff1a @app . post ( \"/tasks\" , operation_id = \"create_task\" ) def new_task (): ...","title":"OperationID"},{"location":"zh/operation-parameters/#security","text":"\u58f0\u660e\u54ea\u4e9b\u5b89\u5168\u673a\u5236\u53ef\u7528\u4e8e\u6b64\u64cd\u4f5c\u3002 \u503c\u5217\u8868\u5305\u62ec\u53ef\u4ee5\u4f7f\u7528\u7684\u66ff\u4ee3\u5b89\u5168\u8981\u6c42\u5bf9\u8c61\u3002 \u53ea\u9700\u6ee1\u8db3\u5176\u4e2d\u4e00\u4e2a\u5b89\u5168\u8981\u6c42\u5bf9\u8c61\u5373\u53ef\u6388\u6743\u8bf7\u6c42\u3002 \u8981\u4f7f\u5b89\u5168\u6027\u6210\u4e3a\u53ef\u9009\uff0c\u53ef\u4ee5\u5728\u6570\u7ec4\u4e2d\u5305\u542b\u4e00\u4e2a\u7a7a\u7684\u5b89\u5168\u6027\u8981\u6c42 ({})\u3002 \u6b64\u5b9a\u4e49\u8986\u76d6\u4efb\u4f55\u58f0\u660e\u7684\u9876\u7ea7\u5b89\u5168\u6027\u3002 \u8981\u5220\u9664\u9876\u7ea7\u5b89\u5168\u58f0\u660e\uff0c\u53ef\u4ee5\u4f7f\u7528\u7a7a\u6570\u7ec4\u3002","title":"Security"},{"location":"zh/operation-parameters/#extra","text":"\u5176\u4f59\u7684Operation\u5c5e\u6027\uff0c\u53ef\u4ee5\u8986\u76d6\u524d\u9762\u8bbe\u7f6e\u6240\u6709\u7684\u5c5e\u6027","title":"Extra"},{"location":"zh/response/","text":"\u54cd\u5e94 \u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528 response_model \u53c2\u6570\u6765\u58f0\u660e\u7528\u4e8e\u54cd\u5e94\u7684\u6a21\u578b\uff1a @app.get() @app.post() @app.put() @app.delete() \u6216\u8005\u5728\u8fd4\u56de\u503c\u7684typehint\u4e2d\u58f0\u660emodel/TypedDict\u3002 \u5728\u88c5\u9970\u5668\u53c2\u6570\u4e2d\u4f7f\u7528 response_model from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None tags : List [ str ] = [] @app . post ( \"/item1/\" , response_model = Item ) def create_item1 ( item : Item ): return item @app . post ( \"/item2/\" , response_model = Item ) def create_item2 ( item : Item ): return item . dict () Note \u6ce8\u610f\uff0c response_model \u662f\u300c\u88c5\u9970\u5668\u300d\u65b9\u6cd5\uff08 get \uff0c post \u7b49\uff09\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u4e0d\u50cf\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff0c\u5b83\u4e0d\u5c5e\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u8def\u5f84\u64cd\u4f5c \u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178\u6216\u8005\u6a21\u578b\u3002 \u5b83\u63a5\u6536\u7684\u7c7b\u578b\u4e0e\u4f60\u5c06\u4e3a Pydantic \u6a21\u578b\u5c5e\u6027\u6240\u58f0\u660e\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a Pydantic \u6a21\u578b\u3002 Flask Sugar \u5c06\u4f7f\u7528\u6b64 response_model \u6765\uff1a \u5c06\u8f93\u51fa\u6570\u636e\u8f6c\u6362\u4e3a\u5176\u58f0\u660e\u7684\u7c7b\u578b\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5728 OpenAPI \u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4e3a\u54cd\u5e94\u6dfb\u52a0\u4e00\u4e2a JSON Schema\u3002 \u5e76\u5728\u81ea\u52a8\u751f\u6210\u6587\u6863\u7cfb\u7edf\u4e2d\u4f7f\u7528\u3002 \u4f46\u6700\u91cd\u8981\u7684\u662f\uff1a \u4f1a\u5c06\u8f93\u51fa\u6570\u636e\u9650\u5236\u5728\u8be5\u6a21\u578b\u5b9a\u4e49\u5185\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u770b\u5230\u8fd9\u4e00\u70b9\u6709\u591a\u91cd\u8981\u3002 \u6280\u672f\u7ec6\u8282 \u54cd\u5e94\u6a21\u578b\u5728\u53c2\u6570\u4e2d\u88ab\u58f0\u660e\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u6ce8\u89e3\uff0c\u8fd9\u662f\u56e0\u4e3a\u8def\u5f84\u51fd\u6570\u53ef\u80fd\u4e0d\u4f1a\u771f\u6b63\u8fd4\u56de\u8be5\u54cd\u5e94\u6a21\u578b\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a dict \u3001\u6570\u636e\u5e93\u5bf9\u8c61\u6216\u5176\u4ed6\u6a21\u578b\uff0c\u7136\u540e\u518d\u4f7f\u7528 response_model \u6765\u6267\u884c\u5b57\u6bb5\u7ea6\u675f\u548c\u5e8f\u5217\u5316\u3002 \u5728\u7c7b\u578b\u6ce8\u89e3\u4e2d\u4f7f\u7528\u6a21\u578b from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None tags : List [ str ] = [] @app . post ( \"/items/\" ) def create_item ( item : Item ) -> Item : return item \u5b83\u548c\u5728\u88c5\u9970\u5668\u53c2\u6570\u4e2d\u4f7f\u7528\u6548\u679c\u4e00\u6837 \u5728\u7c7b\u578b\u6ce8\u89e3\u4e2d\u4f7f\u7528 TypedDict from typing import List from typing_extensions import TypedDict from flask_sugar import Sugar app = Sugar ( __name__ ) class UserInfo ( TypedDict ): name : str age : int tags : List [ str ] @app . get ( \"/\" ) def index () -> UserInfo : return { \"name\" : \"rockman\" , \"age\" : 25 , \"tags\" : [ \"a\" , \"b\" ]} Note \u4f60\u4e0d\u8981 \u8def\u5f84\u64cd\u4f5c \u7684\u53c2\u6570\u548c \u88c5\u9970\u5668 \u4e2d\u4f7f\u7528TypedDict. \u5b83\u53ea\u5728\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u6ce8\u89e3\u751f\u6548\u3002 TypedDict \u5728\u4ee3\u7801\u9759\u6001\u68c0\u67e5\u548c\u5b9e\u9645\u8fd0\u884c\u65f6\u68c0\u67e5 \u8def\u5f84\u64cd\u4f5c \u7684\u8fd4\u56de\u503c \u54cd\u5e94\u6a21\u578b\u7f16\u7801\u53c2\u6570 \u4f60\u7684\u54cd\u5e94\u6a21\u578b\u53ef\u4ee5\u5177\u6709\u9ed8\u8ba4\u503c\uff0c\u4f8b\u5982\uff1a from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/<item_id>\" , response_model = Item , response_model_exclude_unset = True ) def read_item ( item_id : str ): return items [ item_id ] description: Optional[str] = None \u5177\u6709\u9ed8\u8ba4\u503c None \u3002 tax: float = 10.5 \u5177\u6709\u9ed8\u8ba4\u503c 10.5 . tags: List[str] = [] \u5177\u6709\u4e00\u4e2a\u7a7a\u5217\u8868\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff1a [] . \u4f46\u5982\u679c\u5b83\u4eec\u5e76\u6ca1\u6709\u5b58\u50a8\u5b9e\u9645\u7684\u503c\uff0c\u4f60\u53ef\u80fd\u60f3\u4ece\u7ed3\u679c\u4e2d\u5ffd\u7565\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u4f60\u5728 NoSQL \u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u4e86\u5177\u6709\u8bb8\u591a\u53ef\u9009\u5c5e\u6027\u7684\u6a21\u578b\uff0c\u4f46\u4f60\u53c8\u4e0d\u60f3\u53d1\u9001\u5145\u6ee1\u9ed8\u8ba4\u503c\u7684\u5f88\u957f\u7684 JSON \u54cd\u5e94\u3002 \u4f7f\u7528 response_model_exclude_unset \u53c2\u6570 \u4f60\u53ef\u4ee5\u8bbe\u7f6e \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model_exclude_unset=True \u53c2\u6570\uff1a from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/<item_id>\" , response_model = Item , response_model_exclude_unset = True ) def read_item ( item_id : str ): return items [ item_id ] \u7136\u540e\u54cd\u5e94\u4e2d\u5c06\u4e0d\u4f1a\u5305\u542b\u90a3\u4e9b\u9ed8\u8ba4\u503c\uff0c\u800c\u662f\u4ec5\u6709\u5b9e\u9645\u8bbe\u7f6e\u7684\u503c\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u5411 \u8def\u5f84\u64cd\u4f5c \u53d1\u9001 ID \u4e3a foo \u7684\u5546\u54c1\u7684\u8bf7\u6c42\uff0c\u5219\u54cd\u5e94\uff08\u4e0d\u5305\u62ec\u9ed8\u8ba4\u503c\uff09\u5c06\u4e3a\uff1a { \"name\" : \"Foo\" , \"price\" : 50.2 } Info Flask Sugar \u901a\u8fc7 Pydantic \u6a21\u578b\u7684 .dict() \u914d\u5408 \u8be5\u65b9\u6cd5\u7684 exclude_unset \u53c2\u6570 \u6765\u5b9e\u73b0\u6b64\u529f\u80fd\u3002 Info \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\uff1a response_model_exclude_defaults=True response_model_exclude_none=True \u53c2\u8003 Pydantic \u6587\u6863 \u4e2d\u5bf9 exclude_defaults \u548c exclude_none \u7684\u63cf\u8ff0\u3002 \u9ed8\u8ba4\u503c\u5b57\u6bb5\u6709\u5b9e\u9645\u503c\u7684\u6570\u636e \u4f46\u662f\uff0c\u5982\u679c\u4f60\u7684\u6570\u636e\u5728\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u6a21\u578b\u5b57\u6bb5\u4e2d\u6709\u5b9e\u9645\u7684\u503c\uff0c\u4f8b\u5982 ID \u4e3a bar \u7684\u9879\uff1a { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } \u8fd9\u4e9b\u503c\u5c06\u5305\u542b\u5728\u54cd\u5e94\u4e2d\u3002 \u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u503c\u7684\u6570\u636e \u5982\u679c\u6570\u636e\u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u503c\uff0c\u4f8b\u5982 ID \u4e3a baz \u7684\u9879\uff1a { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } \u5373\u4f7f description \u3001 tax \u548c tags \u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u503c\uff0cFlask Sugar \u8db3\u591f\u806a\u660e (\u5b9e\u9645\u4e0a\u662f Pydantic \u8db3\u591f\u806a\u660e) \u53bb\u8ba4\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u5b83\u4eec\u7684\u503c\u88ab\u663e\u5f0f\u5730\u6240\u8bbe\u5b9a\uff08\u800c\u4e0d\u662f\u53d6\u81ea\u9ed8\u8ba4\u503c\uff09\u3002 \u56e0\u6b64\uff0c\u5b83\u4eec\u5c06\u5305\u542b\u5728 JSON \u54cd\u5e94\u4e2d\u3002 Tip \u8bf7\u6ce8\u610f\u9ed8\u8ba4\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\uff0c\u800c\u4e0d\u4ec5\u662f None \u3002 \u5b83\u4eec\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u8868\uff08 [] \uff09\uff0c\u4e00\u4e2a\u503c\u4e3a 10.5 \u7684 float \uff0c\u7b49\u7b49\u3002 response_model_include \u548c response_model_exclude \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model_include \u548c response_model_exclude \u53c2\u6570\u3002 \u5b83\u4eec\u63a5\u6536\u4e00\u4e2a\u7531\u5c5e\u6027\u540d\u79f0 str \u7ec4\u6210\u7684 set \u6765\u5305\u542b\uff08\u5ffd\u7565\u5176\u4ed6\u7684\uff09\u6216\u8005\u6392\u9664\uff08\u5305\u542b\u5176\u4ed6\u7684\uff09\u8fd9\u4e9b\u5c5e\u6027\u3002 \u5982\u679c\u4f60\u53ea\u6709\u4e00\u4e2a Pydantic \u6a21\u578b\uff0c\u5e76\u4e14\u60f3\u8981\u4ece\u8f93\u51fa\u4e2d\u79fb\u9664\u4e00\u4e9b\u6570\u636e\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5feb\u6377\u65b9\u6cd5\u3002 Tip \u4f46\u662f\u4f9d\u7136\u5efa\u8bae\u4f60\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684\u4e3b\u610f\uff0c\u4f7f\u7528\u591a\u4e2a\u7c7b\u800c\u4e0d\u662f\u8fd9\u4e9b\u53c2\u6570\u3002 \u8fd9\u662f\u56e0\u4e3a\u5373\u4f7f\u4f7f\u7528 response_model_include \u6216 response_model_exclude \u6765\u7701\u7565\u67d0\u4e9b\u5c5e\u6027\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u7684 OpenAPI \u5b9a\u4e49\uff08\u548c\u6587\u6863\uff09\u4e2d\u751f\u6210\u7684 JSON Schema \u4ecd\u5c06\u662f\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u8fd9\u4e5f\u9002\u7528\u4e8e\u4f5c\u7528\u7c7b\u4f3c\u7684 response_model_by_alias \u3002 from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/<item_id>/name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/<item_id>/public\" , response_model = Item , response_model_exclude = { \"tax\" }) def read_item_public_data ( item_id : str ): return items [ item_id ] Tip {\"name\", \"description\"} \u8bed\u6cd5\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u8fd9\u4e24\u4e2a\u503c\u7684 set \u3002 \u7b49\u540c\u4e8e set([\"name\", \"description\"]) \u3002 \u5c0f\u7ed3 \u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model \u53c2\u6570\u6765\u5b9a\u4e49\u54cd\u5e94\u6a21\u578b\uff0c\u7279\u522b\u662f\u786e\u4fdd\u79c1\u6709\u6570\u636e\u88ab\u8fc7\u6ee4\u6389\u3002 \u4f7f\u7528 response_model_exclude_unset \u6765\u4ec5\u8fd4\u56de\u663e\u5f0f\u8bbe\u5b9a\u7684\u503c\u3002","title":"\u54cd\u5e94"},{"location":"zh/response/#_1","text":"\u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528 response_model \u53c2\u6570\u6765\u58f0\u660e\u7528\u4e8e\u54cd\u5e94\u7684\u6a21\u578b\uff1a @app.get() @app.post() @app.put() @app.delete() \u6216\u8005\u5728\u8fd4\u56de\u503c\u7684typehint\u4e2d\u58f0\u660emodel/TypedDict\u3002","title":"\u54cd\u5e94"},{"location":"zh/response/#response_model","text":"from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None tags : List [ str ] = [] @app . post ( \"/item1/\" , response_model = Item ) def create_item1 ( item : Item ): return item @app . post ( \"/item2/\" , response_model = Item ) def create_item2 ( item : Item ): return item . dict () Note \u6ce8\u610f\uff0c response_model \u662f\u300c\u88c5\u9970\u5668\u300d\u65b9\u6cd5\uff08 get \uff0c post \u7b49\uff09\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u4e0d\u50cf\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff0c\u5b83\u4e0d\u5c5e\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u8def\u5f84\u64cd\u4f5c \u7684\u8fd4\u56de\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u5178\u6216\u8005\u6a21\u578b\u3002 \u5b83\u63a5\u6536\u7684\u7c7b\u578b\u4e0e\u4f60\u5c06\u4e3a Pydantic \u6a21\u578b\u5c5e\u6027\u6240\u58f0\u660e\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a Pydantic \u6a21\u578b\u3002 Flask Sugar \u5c06\u4f7f\u7528\u6b64 response_model \u6765\uff1a \u5c06\u8f93\u51fa\u6570\u636e\u8f6c\u6362\u4e3a\u5176\u58f0\u660e\u7684\u7c7b\u578b\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5728 OpenAPI \u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4e3a\u54cd\u5e94\u6dfb\u52a0\u4e00\u4e2a JSON Schema\u3002 \u5e76\u5728\u81ea\u52a8\u751f\u6210\u6587\u6863\u7cfb\u7edf\u4e2d\u4f7f\u7528\u3002 \u4f46\u6700\u91cd\u8981\u7684\u662f\uff1a \u4f1a\u5c06\u8f93\u51fa\u6570\u636e\u9650\u5236\u5728\u8be5\u6a21\u578b\u5b9a\u4e49\u5185\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u770b\u5230\u8fd9\u4e00\u70b9\u6709\u591a\u91cd\u8981\u3002 \u6280\u672f\u7ec6\u8282 \u54cd\u5e94\u6a21\u578b\u5728\u53c2\u6570\u4e2d\u88ab\u58f0\u660e\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u6ce8\u89e3\uff0c\u8fd9\u662f\u56e0\u4e3a\u8def\u5f84\u51fd\u6570\u53ef\u80fd\u4e0d\u4f1a\u771f\u6b63\u8fd4\u56de\u8be5\u54cd\u5e94\u6a21\u578b\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a dict \u3001\u6570\u636e\u5e93\u5bf9\u8c61\u6216\u5176\u4ed6\u6a21\u578b\uff0c\u7136\u540e\u518d\u4f7f\u7528 response_model \u6765\u6267\u884c\u5b57\u6bb5\u7ea6\u675f\u548c\u5e8f\u5217\u5316\u3002","title":"\u5728\u88c5\u9970\u5668\u53c2\u6570\u4e2d\u4f7f\u7528response_model"},{"location":"zh/response/#_2","text":"from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None tags : List [ str ] = [] @app . post ( \"/items/\" ) def create_item ( item : Item ) -> Item : return item \u5b83\u548c\u5728\u88c5\u9970\u5668\u53c2\u6570\u4e2d\u4f7f\u7528\u6548\u679c\u4e00\u6837","title":"\u5728\u7c7b\u578b\u6ce8\u89e3\u4e2d\u4f7f\u7528\u6a21\u578b"},{"location":"zh/response/#typeddict","text":"from typing import List from typing_extensions import TypedDict from flask_sugar import Sugar app = Sugar ( __name__ ) class UserInfo ( TypedDict ): name : str age : int tags : List [ str ] @app . get ( \"/\" ) def index () -> UserInfo : return { \"name\" : \"rockman\" , \"age\" : 25 , \"tags\" : [ \"a\" , \"b\" ]} Note \u4f60\u4e0d\u8981 \u8def\u5f84\u64cd\u4f5c \u7684\u53c2\u6570\u548c \u88c5\u9970\u5668 \u4e2d\u4f7f\u7528TypedDict. \u5b83\u53ea\u5728\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u6ce8\u89e3\u751f\u6548\u3002 TypedDict \u5728\u4ee3\u7801\u9759\u6001\u68c0\u67e5\u548c\u5b9e\u9645\u8fd0\u884c\u65f6\u68c0\u67e5 \u8def\u5f84\u64cd\u4f5c \u7684\u8fd4\u56de\u503c","title":"\u5728\u7c7b\u578b\u6ce8\u89e3\u4e2d\u4f7f\u7528TypedDict"},{"location":"zh/response/#_3","text":"\u4f60\u7684\u54cd\u5e94\u6a21\u578b\u53ef\u4ee5\u5177\u6709\u9ed8\u8ba4\u503c\uff0c\u4f8b\u5982\uff1a from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/<item_id>\" , response_model = Item , response_model_exclude_unset = True ) def read_item ( item_id : str ): return items [ item_id ] description: Optional[str] = None \u5177\u6709\u9ed8\u8ba4\u503c None \u3002 tax: float = 10.5 \u5177\u6709\u9ed8\u8ba4\u503c 10.5 . tags: List[str] = [] \u5177\u6709\u4e00\u4e2a\u7a7a\u5217\u8868\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff1a [] . \u4f46\u5982\u679c\u5b83\u4eec\u5e76\u6ca1\u6709\u5b58\u50a8\u5b9e\u9645\u7684\u503c\uff0c\u4f60\u53ef\u80fd\u60f3\u4ece\u7ed3\u679c\u4e2d\u5ffd\u7565\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u4f60\u5728 NoSQL \u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u4e86\u5177\u6709\u8bb8\u591a\u53ef\u9009\u5c5e\u6027\u7684\u6a21\u578b\uff0c\u4f46\u4f60\u53c8\u4e0d\u60f3\u53d1\u9001\u5145\u6ee1\u9ed8\u8ba4\u503c\u7684\u5f88\u957f\u7684 JSON \u54cd\u5e94\u3002","title":"\u54cd\u5e94\u6a21\u578b\u7f16\u7801\u53c2\u6570"},{"location":"zh/response/#response_model_exclude_unset","text":"\u4f60\u53ef\u4ee5\u8bbe\u7f6e \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model_exclude_unset=True \u53c2\u6570\uff1a from typing import List , Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/<item_id>\" , response_model = Item , response_model_exclude_unset = True ) def read_item ( item_id : str ): return items [ item_id ] \u7136\u540e\u54cd\u5e94\u4e2d\u5c06\u4e0d\u4f1a\u5305\u542b\u90a3\u4e9b\u9ed8\u8ba4\u503c\uff0c\u800c\u662f\u4ec5\u6709\u5b9e\u9645\u8bbe\u7f6e\u7684\u503c\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u5411 \u8def\u5f84\u64cd\u4f5c \u53d1\u9001 ID \u4e3a foo \u7684\u5546\u54c1\u7684\u8bf7\u6c42\uff0c\u5219\u54cd\u5e94\uff08\u4e0d\u5305\u62ec\u9ed8\u8ba4\u503c\uff09\u5c06\u4e3a\uff1a { \"name\" : \"Foo\" , \"price\" : 50.2 } Info Flask Sugar \u901a\u8fc7 Pydantic \u6a21\u578b\u7684 .dict() \u914d\u5408 \u8be5\u65b9\u6cd5\u7684 exclude_unset \u53c2\u6570 \u6765\u5b9e\u73b0\u6b64\u529f\u80fd\u3002 Info \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\uff1a response_model_exclude_defaults=True response_model_exclude_none=True \u53c2\u8003 Pydantic \u6587\u6863 \u4e2d\u5bf9 exclude_defaults \u548c exclude_none \u7684\u63cf\u8ff0\u3002","title":"\u4f7f\u7528 response_model_exclude_unset \u53c2\u6570"},{"location":"zh/response/#_4","text":"\u4f46\u662f\uff0c\u5982\u679c\u4f60\u7684\u6570\u636e\u5728\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u6a21\u578b\u5b57\u6bb5\u4e2d\u6709\u5b9e\u9645\u7684\u503c\uff0c\u4f8b\u5982 ID \u4e3a bar \u7684\u9879\uff1a { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } \u8fd9\u4e9b\u503c\u5c06\u5305\u542b\u5728\u54cd\u5e94\u4e2d\u3002","title":"\u9ed8\u8ba4\u503c\u5b57\u6bb5\u6709\u5b9e\u9645\u503c\u7684\u6570\u636e"},{"location":"zh/response/#_5","text":"\u5982\u679c\u6570\u636e\u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u503c\uff0c\u4f8b\u5982 ID \u4e3a baz \u7684\u9879\uff1a { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } \u5373\u4f7f description \u3001 tax \u548c tags \u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u503c\uff0cFlask Sugar \u8db3\u591f\u806a\u660e (\u5b9e\u9645\u4e0a\u662f Pydantic \u8db3\u591f\u806a\u660e) \u53bb\u8ba4\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u5b83\u4eec\u7684\u503c\u88ab\u663e\u5f0f\u5730\u6240\u8bbe\u5b9a\uff08\u800c\u4e0d\u662f\u53d6\u81ea\u9ed8\u8ba4\u503c\uff09\u3002 \u56e0\u6b64\uff0c\u5b83\u4eec\u5c06\u5305\u542b\u5728 JSON \u54cd\u5e94\u4e2d\u3002 Tip \u8bf7\u6ce8\u610f\u9ed8\u8ba4\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\uff0c\u800c\u4e0d\u4ec5\u662f None \u3002 \u5b83\u4eec\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u8868\uff08 [] \uff09\uff0c\u4e00\u4e2a\u503c\u4e3a 10.5 \u7684 float \uff0c\u7b49\u7b49\u3002","title":"\u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u503c\u7684\u6570\u636e"},{"location":"zh/response/#response_model_include-response_model_exclude","text":"\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model_include \u548c response_model_exclude \u53c2\u6570\u3002 \u5b83\u4eec\u63a5\u6536\u4e00\u4e2a\u7531\u5c5e\u6027\u540d\u79f0 str \u7ec4\u6210\u7684 set \u6765\u5305\u542b\uff08\u5ffd\u7565\u5176\u4ed6\u7684\uff09\u6216\u8005\u6392\u9664\uff08\u5305\u542b\u5176\u4ed6\u7684\uff09\u8fd9\u4e9b\u5c5e\u6027\u3002 \u5982\u679c\u4f60\u53ea\u6709\u4e00\u4e2a Pydantic \u6a21\u578b\uff0c\u5e76\u4e14\u60f3\u8981\u4ece\u8f93\u51fa\u4e2d\u79fb\u9664\u4e00\u4e9b\u6570\u636e\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5feb\u6377\u65b9\u6cd5\u3002 Tip \u4f46\u662f\u4f9d\u7136\u5efa\u8bae\u4f60\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684\u4e3b\u610f\uff0c\u4f7f\u7528\u591a\u4e2a\u7c7b\u800c\u4e0d\u662f\u8fd9\u4e9b\u53c2\u6570\u3002 \u8fd9\u662f\u56e0\u4e3a\u5373\u4f7f\u4f7f\u7528 response_model_include \u6216 response_model_exclude \u6765\u7701\u7565\u67d0\u4e9b\u5c5e\u6027\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u7684 OpenAPI \u5b9a\u4e49\uff08\u548c\u6587\u6863\uff09\u4e2d\u751f\u6210\u7684 JSON Schema \u4ecd\u5c06\u662f\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u8fd9\u4e5f\u9002\u7528\u4e8e\u4f5c\u7528\u7c7b\u4f3c\u7684 response_model_by_alias \u3002 from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/<item_id>/name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/<item_id>/public\" , response_model = Item , response_model_exclude = { \"tax\" }) def read_item_public_data ( item_id : str ): return items [ item_id ] Tip {\"name\", \"description\"} \u8bed\u6cd5\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u8fd9\u4e24\u4e2a\u503c\u7684 set \u3002 \u7b49\u540c\u4e8e set([\"name\", \"description\"]) \u3002","title":"response_model_include \u548c response_model_exclude"},{"location":"zh/response/#_6","text":"\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model \u53c2\u6570\u6765\u5b9a\u4e49\u54cd\u5e94\u6a21\u578b\uff0c\u7279\u522b\u662f\u786e\u4fdd\u79c1\u6709\u6570\u636e\u88ab\u8fc7\u6ee4\u6389\u3002 \u4f7f\u7528 response_model_exclude_unset \u6765\u4ec5\u8fd4\u56de\u663e\u5f0f\u8bbe\u5b9a\u7684\u503c\u3002","title":"\u5c0f\u7ed3"},{"location":"zh/sugar-parameters/","text":"Sugar\u7684\u53c2\u6570 \u4ee5\u4e0b\u662f\u5bf9 Sugar \u53c2\u6570\u7684\u4ecb\u7ecd\u3002 Flask\u7684\u53c2\u6570 \u5982\u679c\u60a8\u60f3\u77e5\u9053\u8fd9\u4e9b\u53c2\u6570\u7684\u4f5c\u7528\uff0c\u8bf7\u53c2\u9605 flask\u6587\u6863 . \u53c2\u6570 \u7c7b\u578b import_name str static_url_path str static_folder str static_host str host_matching bool subdomain_matching bool template_folder str instance_path str instance_relative_config bool root_path str API\u5143\u6570\u636e \u4f60\u53ef\u4ee5\u8bbe\u7f6e\u8fd9\u4e9b\u5b57\u6bb5\u6765\u6539\u53d8\u5728 OpenAPI \u548c\u81ea\u52a8 API \u6587\u6863\u7528\u6237\u754c\u9762: \u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 title str \u6587\u6863\u7684\u6807\u9898 description str \u6587\u6863\u7684\u63cf\u8ff0\uff0c\u53ef\u4ee5\u4f7f\u7528markdown\u8bed\u6cd5 doc_version string API \u7684\u7248\u672c\u3002 \u8fd9\u662f\u60a8\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7248\u672c\uff0c\u800c\u4e0d\u662f OpenAPI \u7684\u7248\u672c\u3002 \u4f8b\u5982 2.5.0 \u3002 terms_service str API \u670d\u52a1\u6761\u6b3e\u7684 URL\u3002 \u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u5fc5\u987b\u662f\u4e00\u4e2a URL\u3002 contact dict \u516c\u5f00 API \u7684\u8054\u7cfb\u4fe1\u606f\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\u3002 contact \u5b57\u6bb5 \u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 name str \u8054\u7cfb\u4eba/\u7ec4\u7ec7\u7684\u8bc6\u522b\u540d\u79f0\u3002 url str \u6307\u5411\u8054\u7cfb\u4fe1\u606f\u7684 URL\u3002 \u5fc5\u987b\u91c7\u7528 URL \u683c\u5f0f\u3002 email str \u8054\u7cfb\u4eba/\u7ec4\u7ec7\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c \u5fc5\u987b\u91c7\u7528\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u683c\u5f0f\u3002 license_ dict \u516c\u5f00 API \u7684\u8bb8\u53ef\u8bc1\u4e66\u4fe1\u606f\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\u3002 license_ \u5b57\u6bb5 \u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 name str \u5fc5\u987b\u7684 (\u5982\u679c\u8bbe\u7f6e\u4e86 license_ ). \u7528\u4e8e API \u7684\u8bb8\u53ef\u8bc1\u7684\u540d\u79f0\u3002 url str \u7528\u4e8e API \u7684\u8bb8\u53ef\u8bc1\u7684 URL\u3002 \u5fc5\u987b\u91c7\u7528 URL \u683c\u5f0f\u3002 servers list \u4e00\u7ec4\u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u63d0\u4f9b\u4e0e\u76ee\u6807\u670d\u52a1\u5668\u7684\u8fde\u63a5\u4fe1\u606f\u3002 \u5982\u679c\u672a\u63d0\u4f9b\u670d\u52a1\u5668\u5c5e\u6027\uff0c\u6216\u8005\u63d0\u4f9b\u4e00\u4e2a\u7a7a\u6570\u7ec4\uff0c\u5219\u9ed8\u8ba4\u503c\u5c06\u662f\u4e00\u4e2a url \u503c\u4e3a / \u7684\u670d\u52a1\u5668\u5bf9\u8c61\u3002 security_schemes dict \u5b9a\u4e49\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u7684\u5b89\u5168\u65b9\u6848\u3002 \u652f\u6301\u7684\u65b9\u6848\u662f HTTP \u8eab\u4efd\u9a8c\u8bc1\u3001API \u5bc6\u94a5\uff08\u4f5c\u4e3a\u6807\u5934\u3001cookie \u53c2\u6570\u6216\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\uff09\u3001OAuth2 \u7684\u5e38\u89c1\u6d41\u7a0b\uff08\u9690\u5f0f\u3001\u5bc6\u7801\u3001\u5ba2\u6237\u7aef\u51ed\u636e\u548c\u6388\u6743\u4ee3\u7801\uff09\uff0c\u5982 RFC6749 \u548c OpenID Connect Discovery \u4e2d\u6240\u5b9a\u4e49\u3002 security_schemes \u5b57\u6bb5 \u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 type str \u5fc5\u987b\u7684. \u5b89\u5168\u65b9\u6848\u7684\u7c7b\u578b\u3002 \u6709\u6548\u503c\u4e3a\u201capiKey\u201d\u3001\u201chttp\u201d\u3001\u201coauth2\u201d\u3001\u201copenIdConnect\u201d\u3002 description str \u5b89\u5168\u65b9\u6848\u7684\u7b80\u77ed\u63cf\u8ff0\u3002 CommonMark \u8bed\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5bcc\u6587\u672c\u8868\u793a\u3002 name str \u5fc5\u987b\u7684. \u8981\u4f7f\u7528\u7684\u6807\u5934\u3001\u67e5\u8be2\u6216 cookie \u53c2\u6570\u7684\u540d\u79f0\u3002 in str \u5fc5\u987b\u7684. API \u5bc6\u94a5\u7684\u4f4d\u7f6e\u3002 \u6709\u6548\u503c\u4e3a\u201c\u67e5\u8be2\u201d\u3001\u201c\u6807\u9898\u201d\u6216\u201ccookie\u201d\u3002 \u7b49\u7b49 enable_doc bool \u662f\u5426\u542f\u7528api\u6587\u6863, \u9ed8\u8ba4 True cache_openapi_json bool \u662f\u5426\u7f13\u5b58 OpenAPI json, \u9ed8\u8ba4 True doc_route_filter DocRouteFilter API\u6587\u6863\u8def\u7531\u8fc7\u6ee4\u5668 Tip \u66f4\u591a\u7684\u4fe1\u606f\u5728 swagger\u6587\u6863 \u4f60\u53ef\u4ee5\u8fd9\u6837\u8bbe\u5b9a\uff1a from flask_sugar import Sugar description = \"\"\" YangGeApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = Sugar ( __name__ , title = \"YangGeApp\" , description = description , doc_version = \"0.0.1\" , terms_service = \"http://localhost/terms/\" , contact = { \"name\" : \"YangGe Team\" , \"url\" : \"http://localhost/contact/\" , \"email\" : \"example@example.com\" , }, license_ = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, servers = [ { \"url\" : \"http://127.0.0.1:5000/\" , \"description\" : \"Development server\" , }, { \"url\" : \"http://localhost:5000/\" , \"description\" : \"Staging server\" , }, ], security_schemes = { \"http basic\" : { \"type\" : \"http\" , \"scheme\" : \"basic\" }, \"api key\" : { \"type\" : \"apiKey\" , \"name\" : \"api_key\" , \"in\" : \"header\" } } ) @app . get ( \"/items/\" ) def read_items (): return { \"name\" : \"YangGe\" } Tip \u4f60\u53ef\u4ee5\u5728 description \u4e2d\u4f7f\u7528Markdown\u8bed\u6cd5\uff0c\u5728\u6587\u6863\u9875\u9762\u4e2d\u4f1a\u88ab\u89e3\u6790 \u901a\u8fc7\u8fd9\u6837\u8bbe\u7f6e\uff0c\u81ea\u52a8 API \u6587\u6863\u770b\u8d77\u6765\u4f1a\u50cf\uff1a \u6807\u7b7e\u5143\u6570\u636e \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 tags \uff0c\u4e3a\u7528\u4e8e\u5206\u7ec4\u8def\u5f84\u64cd\u4f5c\u7684\u4e0d\u540c\u6807\u7b7e\u6dfb\u52a0\u989d\u5916\u7684\u5143\u6570\u636e\u3002 \u5b83\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u6bcf\u4e2a\u6807\u7b7e\u5bf9\u5e94\u7684\u4e00\u4e2a\u5b57\u5178\u3002 \u6bcf\u4e2a\u5b57\u5178\u53ef\u4ee5\u5305\u542b\uff1a name \uff08 \u5fc5\u8981 \uff09\uff1a\u4e00\u4e2a str \uff0c\u5b83\u4e0e \u8def\u5f84\u64cd\u4f5c \u548c Blueprint \u4e2d\u4f7f\u7528\u7684 tags \u53c2\u6570\u6709\u76f8\u540c\u7684\u6807\u7b7e\u540d\u3002 description \uff1a\u4e00\u4e2a\u7528\u4e8e\u7b80\u77ed\u63cf\u8ff0\u6807\u7b7e\u7684 str \u3002\u5b83\u652f\u6301 Markdown \u5e76\u4e14\u4f1a\u5728\u6587\u6863\u7528\u6237\u754c\u9762\u4e2d\u663e\u793a\u3002 externalDocs \uff1a\u4e00\u4e2a\u63cf\u8ff0\u5916\u90e8\u6587\u6863\u7684 dict \uff1a description \uff1a\u7528\u4e8e\u7b80\u77ed\u63cf\u8ff0\u5916\u90e8\u6587\u6863\u7684 str \u3002 url \uff08 \u5fc5\u8981 \uff09\uff1a\u5916\u90e8\u6587\u6863\u7684 URL str \u3002 \u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e \u8ba9\u6211\u4eec\u5728\u5e26\u6709\u6807\u7b7e\u7684\u793a\u4f8b\u4e2d\u4e3a users \u548c items \u8bd5\u4e00\u4e0b\u3002 \u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e\u5e76\u628a\u5b83\u4f20\u9012\u7ed9 tags \u53c2\u6570\uff1a from flask_sugar import Sugar tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://shangsky.github.io/flask-sugar\" , }, }, ] app = Sugar ( __name__ , tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) def get_users (): return { \"users\" : [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }]} @app . get ( \"/items/\" , tags = [ \"items\" ]) def get_items (): return { \"items\" : [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }]} \u6ce8\u610f\u4f60\u53ef\u4ee5\u5728\u63cf\u8ff0\u5185\u4f7f\u7528 Markdown\uff0c\u4f8b\u5982\u300clogin\u300d\u4f1a\u663e\u793a\u4e3a\u7c97\u4f53\uff08 login \uff09\u4ee5\u53ca\u300cfancy\u300d\u4f1a\u663e\u793a\u4e3a\u659c\u4f53\uff08 fancy \uff09\u3002 \u63d0\u793a \u4e0d\u5fc5\u4e3a\u4f60\u4f7f\u7528\u7684\u6240\u6709\u6807\u7b7e\u90fd\u6dfb\u52a0\u5143\u6570\u636e\u3002 \u4f7f\u7528\u4f60\u7684\u6807\u7b7e \u5c06 tags \u53c2\u6570\u548c \u8def\u5f84\u64cd\u4f5c \uff08\u4ee5\u53ca Blueprint \uff09\u4e00\u8d77\u4f7f\u7528\uff0c\u5c06\u5176\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u6807\u7b7e\uff1a from flask_sugar import Sugar tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://shangsky.github.io/flask-sugar\" , }, }, ] app = Sugar ( __name__ , tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) def get_users (): return { \"users\" : [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }]} @app . get ( \"/items/\" , tags = [ \"items\" ]) def get_items (): return { \"items\" : [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }]} \u67e5\u770b\u6587\u6863 \u5982\u679c\u4f60\u73b0\u5728\u67e5\u770b\u6587\u6863\uff0c\u5b83\u4eec\u4f1a\u663e\u793a\u6240\u6709\u9644\u52a0\u7684\u5143\u6570\u636e\uff1a \u6807\u7b7e\u987a\u5e8f \u6bcf\u4e2a\u6807\u7b7e\u5143\u6570\u636e\u5b57\u5178\u7684\u987a\u5e8f\u4e5f\u5b9a\u4e49\u4e86\u5728\u6587\u6863\u7528\u6237\u754c\u9762\u663e\u793a\u7684\u987a\u5e8f\u3002 \u4f8b\u5982\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u5373\u4f7f users \u6392\u5728 items \u4e4b\u540e\uff0c\u5b83\u4e5f\u4f1a\u663e\u793a\u5728\u524d\u9762\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5b83\u7684\u5143\u6570\u636e\u6dfb\u52a0\u4e3a\u5217\u8868\u5185\u7684\u7b2c\u4e00\u4e2a\u5b57\u5178\u3002 \u6587\u6863Url\u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 openapi_url_prefix str \u6587\u6863\u7684url\u524d\u7f00. \u5982: openapi_url_prefix=/abc , \u6587\u6863\u5730\u5740\u5c06\u4f1a\u662f /abc/doc and /abc/redoc . openapi_json_url str openapi.json\u7684url, \u5982\u679c openapi_json_url=None , api\u6587\u6863\u5c06\u4f1a\u5173\u95ed swagger_url str swagger\u6587\u6863\u7684url. redoc_url str redoc\u6587\u6863\u7684url. swagger_js_url str swagger ui\u7684js\u6587\u4ef6\u5730\u5740. swagger_css_url str swagger ui\u7684css\u6587\u4ef6\u5730\u5740. redoc_js_url str redoc\u7684js\u6587\u4ef6\u5730\u5740.","title":"Sugar\u7684\u53c2\u6570"},{"location":"zh/sugar-parameters/#sugar","text":"\u4ee5\u4e0b\u662f\u5bf9 Sugar \u53c2\u6570\u7684\u4ecb\u7ecd\u3002","title":"Sugar\u7684\u53c2\u6570"},{"location":"zh/sugar-parameters/#flask","text":"\u5982\u679c\u60a8\u60f3\u77e5\u9053\u8fd9\u4e9b\u53c2\u6570\u7684\u4f5c\u7528\uff0c\u8bf7\u53c2\u9605 flask\u6587\u6863 . \u53c2\u6570 \u7c7b\u578b import_name str static_url_path str static_folder str static_host str host_matching bool subdomain_matching bool template_folder str instance_path str instance_relative_config bool root_path str","title":"Flask\u7684\u53c2\u6570"},{"location":"zh/sugar-parameters/#api","text":"\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u8fd9\u4e9b\u5b57\u6bb5\u6765\u6539\u53d8\u5728 OpenAPI \u548c\u81ea\u52a8 API \u6587\u6863\u7528\u6237\u754c\u9762: \u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 title str \u6587\u6863\u7684\u6807\u9898 description str \u6587\u6863\u7684\u63cf\u8ff0\uff0c\u53ef\u4ee5\u4f7f\u7528markdown\u8bed\u6cd5 doc_version string API \u7684\u7248\u672c\u3002 \u8fd9\u662f\u60a8\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u7248\u672c\uff0c\u800c\u4e0d\u662f OpenAPI \u7684\u7248\u672c\u3002 \u4f8b\u5982 2.5.0 \u3002 terms_service str API \u670d\u52a1\u6761\u6b3e\u7684 URL\u3002 \u5982\u679c\u63d0\u4f9b\uff0c\u8fd9\u5fc5\u987b\u662f\u4e00\u4e2a URL\u3002 contact dict \u516c\u5f00 API \u7684\u8054\u7cfb\u4fe1\u606f\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\u3002 contact \u5b57\u6bb5 \u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 name str \u8054\u7cfb\u4eba/\u7ec4\u7ec7\u7684\u8bc6\u522b\u540d\u79f0\u3002 url str \u6307\u5411\u8054\u7cfb\u4fe1\u606f\u7684 URL\u3002 \u5fc5\u987b\u91c7\u7528 URL \u683c\u5f0f\u3002 email str \u8054\u7cfb\u4eba/\u7ec4\u7ec7\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c \u5fc5\u987b\u91c7\u7528\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u683c\u5f0f\u3002 license_ dict \u516c\u5f00 API \u7684\u8bb8\u53ef\u8bc1\u4e66\u4fe1\u606f\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u5b57\u6bb5\u3002 license_ \u5b57\u6bb5 \u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 name str \u5fc5\u987b\u7684 (\u5982\u679c\u8bbe\u7f6e\u4e86 license_ ). \u7528\u4e8e API \u7684\u8bb8\u53ef\u8bc1\u7684\u540d\u79f0\u3002 url str \u7528\u4e8e API \u7684\u8bb8\u53ef\u8bc1\u7684 URL\u3002 \u5fc5\u987b\u91c7\u7528 URL \u683c\u5f0f\u3002 servers list \u4e00\u7ec4\u670d\u52a1\u5668\u5bf9\u8c61\uff0c\u63d0\u4f9b\u4e0e\u76ee\u6807\u670d\u52a1\u5668\u7684\u8fde\u63a5\u4fe1\u606f\u3002 \u5982\u679c\u672a\u63d0\u4f9b\u670d\u52a1\u5668\u5c5e\u6027\uff0c\u6216\u8005\u63d0\u4f9b\u4e00\u4e2a\u7a7a\u6570\u7ec4\uff0c\u5219\u9ed8\u8ba4\u503c\u5c06\u662f\u4e00\u4e2a url \u503c\u4e3a / \u7684\u670d\u52a1\u5668\u5bf9\u8c61\u3002 security_schemes dict \u5b9a\u4e49\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u7684\u5b89\u5168\u65b9\u6848\u3002 \u652f\u6301\u7684\u65b9\u6848\u662f HTTP \u8eab\u4efd\u9a8c\u8bc1\u3001API \u5bc6\u94a5\uff08\u4f5c\u4e3a\u6807\u5934\u3001cookie \u53c2\u6570\u6216\u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\uff09\u3001OAuth2 \u7684\u5e38\u89c1\u6d41\u7a0b\uff08\u9690\u5f0f\u3001\u5bc6\u7801\u3001\u5ba2\u6237\u7aef\u51ed\u636e\u548c\u6388\u6743\u4ee3\u7801\uff09\uff0c\u5982 RFC6749 \u548c OpenID Connect Discovery \u4e2d\u6240\u5b9a\u4e49\u3002 security_schemes \u5b57\u6bb5 \u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 type str \u5fc5\u987b\u7684. \u5b89\u5168\u65b9\u6848\u7684\u7c7b\u578b\u3002 \u6709\u6548\u503c\u4e3a\u201capiKey\u201d\u3001\u201chttp\u201d\u3001\u201coauth2\u201d\u3001\u201copenIdConnect\u201d\u3002 description str \u5b89\u5168\u65b9\u6848\u7684\u7b80\u77ed\u63cf\u8ff0\u3002 CommonMark \u8bed\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5bcc\u6587\u672c\u8868\u793a\u3002 name str \u5fc5\u987b\u7684. \u8981\u4f7f\u7528\u7684\u6807\u5934\u3001\u67e5\u8be2\u6216 cookie \u53c2\u6570\u7684\u540d\u79f0\u3002 in str \u5fc5\u987b\u7684. API \u5bc6\u94a5\u7684\u4f4d\u7f6e\u3002 \u6709\u6548\u503c\u4e3a\u201c\u67e5\u8be2\u201d\u3001\u201c\u6807\u9898\u201d\u6216\u201ccookie\u201d\u3002 \u7b49\u7b49 enable_doc bool \u662f\u5426\u542f\u7528api\u6587\u6863, \u9ed8\u8ba4 True cache_openapi_json bool \u662f\u5426\u7f13\u5b58 OpenAPI json, \u9ed8\u8ba4 True doc_route_filter DocRouteFilter API\u6587\u6863\u8def\u7531\u8fc7\u6ee4\u5668 Tip \u66f4\u591a\u7684\u4fe1\u606f\u5728 swagger\u6587\u6863 \u4f60\u53ef\u4ee5\u8fd9\u6837\u8bbe\u5b9a\uff1a from flask_sugar import Sugar description = \"\"\" YangGeApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = Sugar ( __name__ , title = \"YangGeApp\" , description = description , doc_version = \"0.0.1\" , terms_service = \"http://localhost/terms/\" , contact = { \"name\" : \"YangGe Team\" , \"url\" : \"http://localhost/contact/\" , \"email\" : \"example@example.com\" , }, license_ = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, servers = [ { \"url\" : \"http://127.0.0.1:5000/\" , \"description\" : \"Development server\" , }, { \"url\" : \"http://localhost:5000/\" , \"description\" : \"Staging server\" , }, ], security_schemes = { \"http basic\" : { \"type\" : \"http\" , \"scheme\" : \"basic\" }, \"api key\" : { \"type\" : \"apiKey\" , \"name\" : \"api_key\" , \"in\" : \"header\" } } ) @app . get ( \"/items/\" ) def read_items (): return { \"name\" : \"YangGe\" } Tip \u4f60\u53ef\u4ee5\u5728 description \u4e2d\u4f7f\u7528Markdown\u8bed\u6cd5\uff0c\u5728\u6587\u6863\u9875\u9762\u4e2d\u4f1a\u88ab\u89e3\u6790 \u901a\u8fc7\u8fd9\u6837\u8bbe\u7f6e\uff0c\u81ea\u52a8 API \u6587\u6863\u770b\u8d77\u6765\u4f1a\u50cf\uff1a","title":"API\u5143\u6570\u636e"},{"location":"zh/sugar-parameters/#_1","text":"\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 tags \uff0c\u4e3a\u7528\u4e8e\u5206\u7ec4\u8def\u5f84\u64cd\u4f5c\u7684\u4e0d\u540c\u6807\u7b7e\u6dfb\u52a0\u989d\u5916\u7684\u5143\u6570\u636e\u3002 \u5b83\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u6bcf\u4e2a\u6807\u7b7e\u5bf9\u5e94\u7684\u4e00\u4e2a\u5b57\u5178\u3002 \u6bcf\u4e2a\u5b57\u5178\u53ef\u4ee5\u5305\u542b\uff1a name \uff08 \u5fc5\u8981 \uff09\uff1a\u4e00\u4e2a str \uff0c\u5b83\u4e0e \u8def\u5f84\u64cd\u4f5c \u548c Blueprint \u4e2d\u4f7f\u7528\u7684 tags \u53c2\u6570\u6709\u76f8\u540c\u7684\u6807\u7b7e\u540d\u3002 description \uff1a\u4e00\u4e2a\u7528\u4e8e\u7b80\u77ed\u63cf\u8ff0\u6807\u7b7e\u7684 str \u3002\u5b83\u652f\u6301 Markdown \u5e76\u4e14\u4f1a\u5728\u6587\u6863\u7528\u6237\u754c\u9762\u4e2d\u663e\u793a\u3002 externalDocs \uff1a\u4e00\u4e2a\u63cf\u8ff0\u5916\u90e8\u6587\u6863\u7684 dict \uff1a description \uff1a\u7528\u4e8e\u7b80\u77ed\u63cf\u8ff0\u5916\u90e8\u6587\u6863\u7684 str \u3002 url \uff08 \u5fc5\u8981 \uff09\uff1a\u5916\u90e8\u6587\u6863\u7684 URL str \u3002","title":"\u6807\u7b7e\u5143\u6570\u636e"},{"location":"zh/sugar-parameters/#_2","text":"\u8ba9\u6211\u4eec\u5728\u5e26\u6709\u6807\u7b7e\u7684\u793a\u4f8b\u4e2d\u4e3a users \u548c items \u8bd5\u4e00\u4e0b\u3002 \u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e\u5e76\u628a\u5b83\u4f20\u9012\u7ed9 tags \u53c2\u6570\uff1a from flask_sugar import Sugar tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://shangsky.github.io/flask-sugar\" , }, }, ] app = Sugar ( __name__ , tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) def get_users (): return { \"users\" : [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }]} @app . get ( \"/items/\" , tags = [ \"items\" ]) def get_items (): return { \"items\" : [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }]} \u6ce8\u610f\u4f60\u53ef\u4ee5\u5728\u63cf\u8ff0\u5185\u4f7f\u7528 Markdown\uff0c\u4f8b\u5982\u300clogin\u300d\u4f1a\u663e\u793a\u4e3a\u7c97\u4f53\uff08 login \uff09\u4ee5\u53ca\u300cfancy\u300d\u4f1a\u663e\u793a\u4e3a\u659c\u4f53\uff08 fancy \uff09\u3002 \u63d0\u793a \u4e0d\u5fc5\u4e3a\u4f60\u4f7f\u7528\u7684\u6240\u6709\u6807\u7b7e\u90fd\u6dfb\u52a0\u5143\u6570\u636e\u3002","title":"\u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e"},{"location":"zh/sugar-parameters/#_3","text":"\u5c06 tags \u53c2\u6570\u548c \u8def\u5f84\u64cd\u4f5c \uff08\u4ee5\u53ca Blueprint \uff09\u4e00\u8d77\u4f7f\u7528\uff0c\u5c06\u5176\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u6807\u7b7e\uff1a from flask_sugar import Sugar tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://shangsky.github.io/flask-sugar\" , }, }, ] app = Sugar ( __name__ , tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) def get_users (): return { \"users\" : [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }]} @app . get ( \"/items/\" , tags = [ \"items\" ]) def get_items (): return { \"items\" : [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }]}","title":"\u4f7f\u7528\u4f60\u7684\u6807\u7b7e"},{"location":"zh/sugar-parameters/#_4","text":"\u5982\u679c\u4f60\u73b0\u5728\u67e5\u770b\u6587\u6863\uff0c\u5b83\u4eec\u4f1a\u663e\u793a\u6240\u6709\u9644\u52a0\u7684\u5143\u6570\u636e\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"zh/sugar-parameters/#_5","text":"\u6bcf\u4e2a\u6807\u7b7e\u5143\u6570\u636e\u5b57\u5178\u7684\u987a\u5e8f\u4e5f\u5b9a\u4e49\u4e86\u5728\u6587\u6863\u7528\u6237\u754c\u9762\u663e\u793a\u7684\u987a\u5e8f\u3002 \u4f8b\u5982\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u5373\u4f7f users \u6392\u5728 items \u4e4b\u540e\uff0c\u5b83\u4e5f\u4f1a\u663e\u793a\u5728\u524d\u9762\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5b83\u7684\u5143\u6570\u636e\u6dfb\u52a0\u4e3a\u5217\u8868\u5185\u7684\u7b2c\u4e00\u4e2a\u5b57\u5178\u3002","title":"\u6807\u7b7e\u987a\u5e8f"},{"location":"zh/sugar-parameters/#url","text":"\u53c2\u6570 \u7c7b\u578b \u63cf\u8ff0 openapi_url_prefix str \u6587\u6863\u7684url\u524d\u7f00. \u5982: openapi_url_prefix=/abc , \u6587\u6863\u5730\u5740\u5c06\u4f1a\u662f /abc/doc and /abc/redoc . openapi_json_url str openapi.json\u7684url, \u5982\u679c openapi_json_url=None , api\u6587\u6863\u5c06\u4f1a\u5173\u95ed swagger_url str swagger\u6587\u6863\u7684url. redoc_url str redoc\u6587\u6863\u7684url. swagger_js_url str swagger ui\u7684js\u6587\u4ef6\u5730\u5740. swagger_css_url str swagger ui\u7684css\u6587\u4ef6\u5730\u5740. redoc_js_url str redoc\u7684js\u6587\u4ef6\u5730\u5740.","title":"\u6587\u6863Url\u53c2\u6570"},{"location":"zh/params/cookie-params/","text":"cookie\u53c2\u6570 \u60a8\u53ef\u4ee5\u50cf\u5b9a\u4e49 Query \u548c Path \u53c2\u6570\u4e00\u6837\u5b9a\u4e49 Cookie \u53c2\u6570. \u5bfc\u5165 Cookie \u9996\u5148\uff0c\u5bfc\u5165 Cookie : from typing import Optional from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( cookie_value : Optional [ str ] = Cookie ( None )): return { \"cookie_value\" : cookie_value } \u58f0\u660e Cookie \u53c2\u6570 \u7136\u540e\u4f7f\u7528\u4e0e Path \u548c Query \u76f8\u540c\u7684\u7ed3\u6784\u58f0\u660e cookie \u53c2\u6570. \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u60a8\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u989d\u5916\u7684\u9a8c\u8bc1\u6216\u6ce8\u91ca\u53c2\u6570: from typing import Optional from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( cookie_value : Optional [ str ] = Cookie ( None )): return { \"cookie_value\" : cookie_value } \u6280\u672f\u7ec6\u8282 Cookie \u662f Path \u548c Query \u7684\u201c\u59d0\u59b9\u201d\u7c7b\u3002 \u5b83\u4eec\u7ee7\u627f\u81ea Param \u7c7b. \u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4f60\u4ece flask_sugar \u4e2d\u5bfc\u5165 Query \u3001 Path \u3001 Cookie \u7b49\u65f6\uff0c\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570. Info \u8981\u58f0\u660ecookie\uff0c\u60a8\u9700\u8981\u4f7f\u7528 Cookie \uff0c\u5426\u5219\u53c2\u6570\u5c06\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570. cookie \u5217\u8868 \u53ef\u80fd\u4f1a\u6536\u5230\u5177\u6709\u591a\u4e2a\u503c\u7684\u540c\u4e00\u4e2acookie. \u60a8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u58f0\u660e\u4e2d\u7684\u5217\u8868\u6765\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5. \u60a8\u5c06\u628a cookie \u4e2d\u7684\u503c\u5206\u5272\u4e3a Python\u7684 list . \u4f8b\u5982, \u58f0\u660e\u4e00\u4e2a\u5177\u6709\u591a\u4e2a\u503c\u7684cookie values , \u4f60\u53ef\u4ee5\u8fd9\u6837\u5199: from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( values : List [ str ] = Cookie ( None )): return { \"values\" : values } \u4f60\u5c06\u53d1\u9001\u4e00\u4e2a\u8fd9\u6837\u7684cookie\u4e0e\u89c6\u56fe\u51fd\u6570\u901a\u4fe1: values: foo,bar \u54cd\u5e94\u5c06\u7c7b\u4f3c\u4e8e\uff1a { \"values\" : [ \"bar\" , \"foo\" ] } \u56de\u987e \u4f7f\u7528 Cookie \u58f0\u660ecookie\uff0c\u4f7f\u7528\u4e0e Query \u548c Path \u76f8\u540c\u7684\u901a\u7528\u6a21\u5f0f.","title":"cookie\u53c2\u6570"},{"location":"zh/params/cookie-params/#cookie","text":"\u60a8\u53ef\u4ee5\u50cf\u5b9a\u4e49 Query \u548c Path \u53c2\u6570\u4e00\u6837\u5b9a\u4e49 Cookie \u53c2\u6570.","title":"cookie\u53c2\u6570"},{"location":"zh/params/cookie-params/#cookie_1","text":"\u9996\u5148\uff0c\u5bfc\u5165 Cookie : from typing import Optional from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( cookie_value : Optional [ str ] = Cookie ( None )): return { \"cookie_value\" : cookie_value }","title":"\u5bfc\u5165 Cookie"},{"location":"zh/params/cookie-params/#cookie_2","text":"\u7136\u540e\u4f7f\u7528\u4e0e Path \u548c Query \u76f8\u540c\u7684\u7ed3\u6784\u58f0\u660e cookie \u53c2\u6570. \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u60a8\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u989d\u5916\u7684\u9a8c\u8bc1\u6216\u6ce8\u91ca\u53c2\u6570: from typing import Optional from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( cookie_value : Optional [ str ] = Cookie ( None )): return { \"cookie_value\" : cookie_value } \u6280\u672f\u7ec6\u8282 Cookie \u662f Path \u548c Query \u7684\u201c\u59d0\u59b9\u201d\u7c7b\u3002 \u5b83\u4eec\u7ee7\u627f\u81ea Param \u7c7b. \u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4f60\u4ece flask_sugar \u4e2d\u5bfc\u5165 Query \u3001 Path \u3001 Cookie \u7b49\u65f6\uff0c\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570. Info \u8981\u58f0\u660ecookie\uff0c\u60a8\u9700\u8981\u4f7f\u7528 Cookie \uff0c\u5426\u5219\u53c2\u6570\u5c06\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570.","title":"\u58f0\u660e Cookie \u53c2\u6570"},{"location":"zh/params/cookie-params/#cookie_3","text":"\u53ef\u80fd\u4f1a\u6536\u5230\u5177\u6709\u591a\u4e2a\u503c\u7684\u540c\u4e00\u4e2acookie. \u60a8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u58f0\u660e\u4e2d\u7684\u5217\u8868\u6765\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5. \u60a8\u5c06\u628a cookie \u4e2d\u7684\u503c\u5206\u5272\u4e3a Python\u7684 list . \u4f8b\u5982, \u58f0\u660e\u4e00\u4e2a\u5177\u6709\u591a\u4e2a\u503c\u7684cookie values , \u4f60\u53ef\u4ee5\u8fd9\u6837\u5199: from flask_sugar import Sugar , Cookie app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( values : List [ str ] = Cookie ( None )): return { \"values\" : values } \u4f60\u5c06\u53d1\u9001\u4e00\u4e2a\u8fd9\u6837\u7684cookie\u4e0e\u89c6\u56fe\u51fd\u6570\u901a\u4fe1: values: foo,bar \u54cd\u5e94\u5c06\u7c7b\u4f3c\u4e8e\uff1a { \"values\" : [ \"bar\" , \"foo\" ] }","title":"cookie \u5217\u8868"},{"location":"zh/params/cookie-params/#_1","text":"\u4f7f\u7528 Cookie \u58f0\u660ecookie\uff0c\u4f7f\u7528\u4e0e Query \u548c Path \u76f8\u540c\u7684\u901a\u7528\u6a21\u5f0f.","title":"\u56de\u987e"},{"location":"zh/params/file-uploads/","text":"\u6587\u4ef6\u4e0a\u4f20 File \u7528\u4e8e\u5b9a\u4e49\u5ba2\u6237\u7aef\u7684\u4e0a\u4f20\u6587\u4ef6\u3002 \u5bfc\u5165 File \u4ece flask_sugar \u5bfc\u5165 File \u548c UploadFile \uff1a from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( file : UploadFile = File ( ... )): return { \"filename\" : file . filename } \u5b9a\u4e49 File \u53c2\u6570 \u521b\u5efa\u6587\u4ef6\uff08 File \uff09\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Cookie \u548c Header \u4e00\u6837\uff1a from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( file : UploadFile = File ( ... )): return { \"filename\" : file . filename } UploadFile UploadFile \u662fwerkzeug.datastructures.FileStorage\u7684\u522b\u540d, \u5b83\u7684\u5c5e\u6027\u5982\u4e0b: filename name stream content_type content_length mimetype mimetype_params save(dst, buffer_size=16384) close() \u4ec0\u4e48\u662f \u300c\u8868\u5355\u6570\u636e\u300d \u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528\u300c\u7279\u6b8a\u300d\u7684\u7f16\u7801\u3002 Flask Sugar \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u4e0d\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u8868\u5355\u6570\u636e\u4e00\u822c\u7528 application/x-www-form-urlencoded \u300c\u5a92\u4f53\u7c7b\u578b\u300d\u7f16\u7801\u3002 \u4f46\u8868\u5355\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u7f16\u7801\u4e3a multipart/form-data \u3002\u4f7f\u7528\u4e86 File \uff0c Flask Sugar \u5c31\u77e5\u9053\u8981\u4ece\u8bf7\u6c42\u4f53\u7684\u6b63\u786e\u4f4d\u7f6e\u83b7\u53d6\u6587\u4ef6\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u548c Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f Flask Sugar \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002 \u591a\u6587\u4ef6\u4e0a\u4f20 Flask Sugar \u652f\u6301\u540c\u65f6\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u53ef\u7528\u540c\u4e00\u4e2a\u300c\u8868\u5355\u5b57\u6bb5\u300d\u53d1\u9001\u542b\u591a\u4e2a\u6587\u4ef6\u7684\u300c\u8868\u5355\u6570\u636e\u300d\u3002 \u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u65f6\uff0c\u8981\u58f0\u5305\u542b UploadFile \u7684\u5217\u8868\uff08 List \uff09\uff1a from typing import List from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( files : List [ UploadFile ] = File ( ... )): return { \"filenames\" : [ file . filename for file in files ]} \u63a5\u6536\u7684\u4e5f\u662f\u542b UploadFile \u7684\u5217\u8868\uff08 list \uff09\u3002 \u5c0f\u7ed3 \u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u7528 File \u628a\u4e0a\u4f20\u6587\u4ef6\u58f0\u660e\u4e3a\uff08\u8868\u5355\u6570\u636e\u7684\uff09\u8f93\u5165\u53c2\u6570\u3002","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"zh/params/file-uploads/#_1","text":"File \u7528\u4e8e\u5b9a\u4e49\u5ba2\u6237\u7aef\u7684\u4e0a\u4f20\u6587\u4ef6\u3002","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"zh/params/file-uploads/#file","text":"\u4ece flask_sugar \u5bfc\u5165 File \u548c UploadFile \uff1a from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( file : UploadFile = File ( ... )): return { \"filename\" : file . filename }","title":"\u5bfc\u5165 File"},{"location":"zh/params/file-uploads/#file_1","text":"\u521b\u5efa\u6587\u4ef6\uff08 File \uff09\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Cookie \u548c Header \u4e00\u6837\uff1a from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( file : UploadFile = File ( ... )): return { \"filename\" : file . filename }","title":"\u5b9a\u4e49 File \u53c2\u6570"},{"location":"zh/params/file-uploads/#uploadfile","text":"UploadFile \u662fwerkzeug.datastructures.FileStorage\u7684\u522b\u540d, \u5b83\u7684\u5c5e\u6027\u5982\u4e0b: filename name stream content_type content_length mimetype mimetype_params save(dst, buffer_size=16384) close()","title":"UploadFile"},{"location":"zh/params/file-uploads/#_2","text":"\u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528\u300c\u7279\u6b8a\u300d\u7684\u7f16\u7801\u3002 Flask Sugar \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u4e0d\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u8868\u5355\u6570\u636e\u4e00\u822c\u7528 application/x-www-form-urlencoded \u300c\u5a92\u4f53\u7c7b\u578b\u300d\u7f16\u7801\u3002 \u4f46\u8868\u5355\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u7f16\u7801\u4e3a multipart/form-data \u3002\u4f7f\u7528\u4e86 File \uff0c Flask Sugar \u5c31\u77e5\u9053\u8981\u4ece\u8bf7\u6c42\u4f53\u7684\u6b63\u786e\u4f4d\u7f6e\u83b7\u53d6\u6587\u4ef6\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u548c Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f Flask Sugar \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002","title":"\u4ec0\u4e48\u662f \u300c\u8868\u5355\u6570\u636e\u300d"},{"location":"zh/params/file-uploads/#_3","text":"Flask Sugar \u652f\u6301\u540c\u65f6\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u53ef\u7528\u540c\u4e00\u4e2a\u300c\u8868\u5355\u5b57\u6bb5\u300d\u53d1\u9001\u542b\u591a\u4e2a\u6587\u4ef6\u7684\u300c\u8868\u5355\u6570\u636e\u300d\u3002 \u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u65f6\uff0c\u8981\u58f0\u5305\u542b UploadFile \u7684\u5217\u8868\uff08 List \uff09\uff1a from typing import List from flask_sugar import Sugar , File , UploadFile app = Sugar ( __name__ ) @app . post ( \"/upload\" ) def upload ( files : List [ UploadFile ] = File ( ... )): return { \"filenames\" : [ file . filename for file in files ]} \u63a5\u6536\u7684\u4e5f\u662f\u542b UploadFile \u7684\u5217\u8868\uff08 list \uff09\u3002","title":"\u591a\u6587\u4ef6\u4e0a\u4f20"},{"location":"zh/params/file-uploads/#_4","text":"\u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u7528 File \u628a\u4e0a\u4f20\u6587\u4ef6\u58f0\u660e\u4e3a\uff08\u8868\u5355\u6570\u636e\u7684\uff09\u8f93\u5165\u53c2\u6570\u3002","title":"\u5c0f\u7ed3"},{"location":"zh/params/form-data/","text":"\u8868\u5355\u6570\u636e \u63a5\u6536\u7684\u4e0d\u662f JSON\uff0c\u800c\u662f\u8868\u5355\u5b57\u6bb5\u65f6\uff0c\u8981\u4f7f\u7528 Form \u3002 \u5bfc\u5165 Form \u4ece flask_sugar \u5bfc\u5165 Form \uff1a from flask_sugar import Sugar , Form from pydantic import BaseModel app = Sugar ( __name__ ) class LoginInfo ( BaseModel ): username : str password : str @app . post ( \"/login\" ) def login ( login_info : LoginInfo = Form ( ... )): return { \"username\" : login_info . username } \u5b9a\u4e49 Form \u53c2\u6570 from flask_sugar import Sugar , Form from pydantic import BaseModel app = Sugar ( __name__ ) class LoginInfo ( BaseModel ): username : str password : str @app . post ( \"/login\" ) def login ( login_info : LoginInfo = Form ( ... )): return { \"username\" : login_info . username } \u4f8b\u5982\uff0cOAuth2 \u89c4\u8303\u7684 \"\u5bc6\u7801\u6d41\" \u6a21\u5f0f\u89c4\u5b9a\u8981\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001 username \u548c password \u3002 \u8be5\u89c4\u8303 \u8981\u6c42\u5b57\u6bb5\u5fc5\u987b\u547d\u540d\u4e3a username \u548c password \uff0c\u5e76\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001\uff0c\u4e0d\u80fd\u7528 JSON\u3002 \u4f7f\u7528 Form \u53ef\u4ee5\u58f0\u660e\u4e0e Body \u76f8\u540c\u7684\u5143\u6570\u636e\u548c\u9a8c\u8bc1\u3002 \u8bf4\u660e Form \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Body \u7684\u7c7b\u3002 \u63d0\u793a \u58f0\u660e\u8868\u5355\u4f53\u8981\u663e\u5f0f\u4f7f\u7528 Form \uff0c\u5426\u5219\uff0cFlask Sugar\u4f1a\u628a\u8be5\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002 \u5173\u4e8e \"\u8868\u5355\u5b57\u6bb5\" \u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528\u300c\u7279\u6b8a\u300d\u7684\u7f16\u7801\u3002 Flask Sugar \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u8868\u5355\u6570\u636e\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u7f16\u7801\u4e00\u822c\u4e3a application/x-www-form-urlencoded \u3002 \u4f46\u5305\u542b\u6587\u4ef6\u7684\u8868\u5355\u7f16\u7801\u4e3a multipart/form-data \u3002\u6587\u4ef6\u5904\u7406\u8be6\u89c1\u4e0b\u8282\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f application/x-www-form-urlencoded \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f Flask Sugar \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002 \u5c0f\u7ed3 \u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Form \u58f0\u660e\u8868\u5355\u6570\u636e\u8f93\u5165\u53c2\u6570\u3002","title":"\u8868\u5355\u6570\u636e"},{"location":"zh/params/form-data/#_1","text":"\u63a5\u6536\u7684\u4e0d\u662f JSON\uff0c\u800c\u662f\u8868\u5355\u5b57\u6bb5\u65f6\uff0c\u8981\u4f7f\u7528 Form \u3002","title":"\u8868\u5355\u6570\u636e"},{"location":"zh/params/form-data/#form","text":"\u4ece flask_sugar \u5bfc\u5165 Form \uff1a from flask_sugar import Sugar , Form from pydantic import BaseModel app = Sugar ( __name__ ) class LoginInfo ( BaseModel ): username : str password : str @app . post ( \"/login\" ) def login ( login_info : LoginInfo = Form ( ... )): return { \"username\" : login_info . username }","title":"\u5bfc\u5165 Form"},{"location":"zh/params/form-data/#form_1","text":"from flask_sugar import Sugar , Form from pydantic import BaseModel app = Sugar ( __name__ ) class LoginInfo ( BaseModel ): username : str password : str @app . post ( \"/login\" ) def login ( login_info : LoginInfo = Form ( ... )): return { \"username\" : login_info . username } \u4f8b\u5982\uff0cOAuth2 \u89c4\u8303\u7684 \"\u5bc6\u7801\u6d41\" \u6a21\u5f0f\u89c4\u5b9a\u8981\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001 username \u548c password \u3002 \u8be5\u89c4\u8303 \u8981\u6c42\u5b57\u6bb5\u5fc5\u987b\u547d\u540d\u4e3a username \u548c password \uff0c\u5e76\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001\uff0c\u4e0d\u80fd\u7528 JSON\u3002 \u4f7f\u7528 Form \u53ef\u4ee5\u58f0\u660e\u4e0e Body \u76f8\u540c\u7684\u5143\u6570\u636e\u548c\u9a8c\u8bc1\u3002 \u8bf4\u660e Form \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Body \u7684\u7c7b\u3002 \u63d0\u793a \u58f0\u660e\u8868\u5355\u4f53\u8981\u663e\u5f0f\u4f7f\u7528 Form \uff0c\u5426\u5219\uff0cFlask Sugar\u4f1a\u628a\u8be5\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002","title":"\u5b9a\u4e49 Form \u53c2\u6570"},{"location":"zh/params/form-data/#_2","text":"\u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528\u300c\u7279\u6b8a\u300d\u7684\u7f16\u7801\u3002 Flask Sugar \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u8868\u5355\u6570\u636e\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u7f16\u7801\u4e00\u822c\u4e3a application/x-www-form-urlencoded \u3002 \u4f46\u5305\u542b\u6587\u4ef6\u7684\u8868\u5355\u7f16\u7801\u4e3a multipart/form-data \u3002\u6587\u4ef6\u5904\u7406\u8be6\u89c1\u4e0b\u8282\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f application/x-www-form-urlencoded \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f Flask Sugar \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002","title":"\u5173\u4e8e \"\u8868\u5355\u5b57\u6bb5\""},{"location":"zh/params/form-data/#_3","text":"\u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Form \u58f0\u660e\u8868\u5355\u6570\u636e\u8f93\u5165\u53c2\u6570\u3002","title":"\u5c0f\u7ed3"},{"location":"zh/params/header-params/","text":"\u8bf7\u6c42\u5934\u53c2\u6570 \u60a8\u53ef\u4ee5\u50cf\u5b9a\u4e49 Query \u3001 Path \u548c Cookie \u53c2\u6570\u4e00\u6837\u5b9a\u4e49 Header \u53c2\u6570. \u5bfc\u5165 Header \u9996\u5148\uff0c\u5bfc\u5165 Header : from typing import Optional from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( user_agent : Optional [ str ] = Header ( None )): return { \"user_agent\" : user_agent } \u58f0\u660e Header \u53c2\u6570 \u7136\u540e\u4f7f\u7528\u4e0e Path \u3001 Query \u548c Cookie \u76f8\u540c\u7684\u7ed3\u6784\u58f0\u660e\u5934\u53c2\u6570. \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u60a8\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u989d\u5916\u7684\u9a8c\u8bc1\u6216\u6ce8\u91ca\u53c2\u6570: from typing import Optional from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( user_agent : Optional [ str ] = Header ( None )): return { \"user_agent\" : user_agent } \u6280\u672f\u7ec6\u8282 Header \u662f Path \u548c Query \u7684\u201c\u59d0\u59b9\u201d\u7c7b\u3002 \u5b83\u4eec\u7ee7\u627f\u81ea Param \u7c7b\u3002 \u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4f60\u4ece flask_sugar \u4e2d\u5bfc\u5165 Query \u3001 Path \u3001 Header \u7b49\u65f6\uff0c\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570. Info \u8981\u58f0\u660eheader\uff0c\u60a8\u9700\u8981\u4f7f\u7528 Header \uff0c\u5426\u5219\u53c2\u6570\u5c06\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570. \u81ea\u52a8\u8f6c\u6362 Header \u5728 Path \u3001 Query \u548c Cookie \u63d0\u4f9b\u7684\u57fa\u7840\u4e0a\u6709\u4e00\u4e9b\u989d\u5916\u7684\u529f\u80fd. \u5927\u591a\u6570\u6807\u51c6\u6807\u9898\u7531\"\u8fde\u5b57\u7b26\"\u5b57\u7b26\u5206\u9694\uff0c\u4e5f\u79f0\u4e3a\"\u51cf\u53f7\"(-). \u4f46\u662f\u50cf user-agent \u8fd9\u6837\u7684\u53d8\u91cf\u5728 Python \u4e2d\u662f\u65e0\u6548\u7684\u3002 \u56e0\u6b64\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c Header \u4f1a\u5c06\u53c2\u6570\u540d\u79f0\u5b57\u7b26\u4ece\u4e0b\u5212\u7ebf ( _ ) \u8f6c\u6362\u4e3a\u8fde\u5b57\u7b26 ( - ) \u4ee5\u63d0\u53d6\u548c\u8bb0\u5f55\u8bf7\u6c42\u5934\u3002 \u6b64\u5916\uff0cHTTP \u6807\u5934\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6 Python \u6837\u5f0f\uff08\u4e5f\u79f0\u4e3a\u201c\u86c7\u5f62\u547d\u540d\u6cd5\u201d\uff09\u58f0\u660e\u5b83\u4eec\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u50cf\u5728 Python \u4ee3\u7801\u4e2d\u901a\u5e38\u4f7f\u7528\u7684\u90a3\u6837\u4f7f\u7528 user_agent \uff0c\u800c\u4e0d\u9700\u8981\u5c06\u9996\u5b57\u6bcd\u5927\u5199\u4e3a User_Agent \u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002 header\u5217\u8868 \u53ef\u80fd\u4f1a\u6536\u5230\u5177\u6709\u591a\u4e2a\u503c\u7684\u540c\u4e00\u4e2aheader\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u58f0\u660e\u4e2d\u7684\u5217\u8868\u6765\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5\u3002 \u60a8\u5c06\u628a header \u4e2d\u7684\u503c\u5206\u5272\u4e3a Python\u7684 list . \u4f8b\u5982, \u58f0\u660e\u4e00\u4e2a\u5177\u6709\u591a\u4e2a\u503c\u7684header X-Token , \u4f60\u53ef\u4ee5\u8fd9\u6837\u5199: from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( x_token : List [ str ] = Header ( None )): return { \"X-Token values\" : x_token } \u4f60\u5c06\u53d1\u9001\u4e00\u4e2a\u8fd9\u6837\u7684header\u4e0e\u89c6\u56fe\u51fd\u6570\u901a\u4fe1: X-Token: foo,bar \u54cd\u5e94\u5c06\u7c7b\u4f3c\u4e8e: { \"X-Token values\" : [ \"bar\" , \"foo\" ] } \u56de\u987e \u4f7f\u7528 Header \u58f0\u660eheader\uff0c\u4f7f\u7528\u4e0e Query \u548c Path \u76f8\u540c\u7684\u901a\u7528\u6a21\u5f0f. \u5e76\u4e14\u4e0d\u8981\u62c5\u5fc3\u53d8\u91cf\u4e2d\u7684\u4e0b\u5212\u7ebf\uff0c FLask Sugar \u5c06\u8d1f\u8d23\u8f6c\u6362\u5b83\u4eec\u3002","title":"\u8bf7\u6c42\u5934\u53c2\u6570"},{"location":"zh/params/header-params/#_1","text":"\u60a8\u53ef\u4ee5\u50cf\u5b9a\u4e49 Query \u3001 Path \u548c Cookie \u53c2\u6570\u4e00\u6837\u5b9a\u4e49 Header \u53c2\u6570.","title":"\u8bf7\u6c42\u5934\u53c2\u6570"},{"location":"zh/params/header-params/#header","text":"\u9996\u5148\uff0c\u5bfc\u5165 Header : from typing import Optional from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( user_agent : Optional [ str ] = Header ( None )): return { \"user_agent\" : user_agent }","title":"\u5bfc\u5165Header"},{"location":"zh/params/header-params/#header_1","text":"\u7136\u540e\u4f7f\u7528\u4e0e Path \u3001 Query \u548c Cookie \u76f8\u540c\u7684\u7ed3\u6784\u58f0\u660e\u5934\u53c2\u6570. \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u60a8\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u989d\u5916\u7684\u9a8c\u8bc1\u6216\u6ce8\u91ca\u53c2\u6570: from typing import Optional from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( user_agent : Optional [ str ] = Header ( None )): return { \"user_agent\" : user_agent } \u6280\u672f\u7ec6\u8282 Header \u662f Path \u548c Query \u7684\u201c\u59d0\u59b9\u201d\u7c7b\u3002 \u5b83\u4eec\u7ee7\u627f\u81ea Param \u7c7b\u3002 \u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4f60\u4ece flask_sugar \u4e2d\u5bfc\u5165 Query \u3001 Path \u3001 Header \u7b49\u65f6\uff0c\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570. Info \u8981\u58f0\u660eheader\uff0c\u60a8\u9700\u8981\u4f7f\u7528 Header \uff0c\u5426\u5219\u53c2\u6570\u5c06\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570.","title":"\u58f0\u660eHeader\u53c2\u6570"},{"location":"zh/params/header-params/#_2","text":"Header \u5728 Path \u3001 Query \u548c Cookie \u63d0\u4f9b\u7684\u57fa\u7840\u4e0a\u6709\u4e00\u4e9b\u989d\u5916\u7684\u529f\u80fd. \u5927\u591a\u6570\u6807\u51c6\u6807\u9898\u7531\"\u8fde\u5b57\u7b26\"\u5b57\u7b26\u5206\u9694\uff0c\u4e5f\u79f0\u4e3a\"\u51cf\u53f7\"(-). \u4f46\u662f\u50cf user-agent \u8fd9\u6837\u7684\u53d8\u91cf\u5728 Python \u4e2d\u662f\u65e0\u6548\u7684\u3002 \u56e0\u6b64\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c Header \u4f1a\u5c06\u53c2\u6570\u540d\u79f0\u5b57\u7b26\u4ece\u4e0b\u5212\u7ebf ( _ ) \u8f6c\u6362\u4e3a\u8fde\u5b57\u7b26 ( - ) \u4ee5\u63d0\u53d6\u548c\u8bb0\u5f55\u8bf7\u6c42\u5934\u3002 \u6b64\u5916\uff0cHTTP \u6807\u5934\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6 Python \u6837\u5f0f\uff08\u4e5f\u79f0\u4e3a\u201c\u86c7\u5f62\u547d\u540d\u6cd5\u201d\uff09\u58f0\u660e\u5b83\u4eec\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u50cf\u5728 Python \u4ee3\u7801\u4e2d\u901a\u5e38\u4f7f\u7528\u7684\u90a3\u6837\u4f7f\u7528 user_agent \uff0c\u800c\u4e0d\u9700\u8981\u5c06\u9996\u5b57\u6bcd\u5927\u5199\u4e3a User_Agent \u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002","title":"\u81ea\u52a8\u8f6c\u6362"},{"location":"zh/params/header-params/#header_2","text":"\u53ef\u80fd\u4f1a\u6536\u5230\u5177\u6709\u591a\u4e2a\u503c\u7684\u540c\u4e00\u4e2aheader\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u58f0\u660e\u4e2d\u7684\u5217\u8868\u6765\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5\u3002 \u60a8\u5c06\u628a header \u4e2d\u7684\u503c\u5206\u5272\u4e3a Python\u7684 list . \u4f8b\u5982, \u58f0\u660e\u4e00\u4e2a\u5177\u6709\u591a\u4e2a\u503c\u7684header X-Token , \u4f60\u53ef\u4ee5\u8fd9\u6837\u5199: from flask_sugar import Sugar , Header app = Sugar ( __name__ ) @app . get ( \"/\" ) def index ( x_token : List [ str ] = Header ( None )): return { \"X-Token values\" : x_token } \u4f60\u5c06\u53d1\u9001\u4e00\u4e2a\u8fd9\u6837\u7684header\u4e0e\u89c6\u56fe\u51fd\u6570\u901a\u4fe1: X-Token: foo,bar \u54cd\u5e94\u5c06\u7c7b\u4f3c\u4e8e: { \"X-Token values\" : [ \"bar\" , \"foo\" ] }","title":"header\u5217\u8868"},{"location":"zh/params/header-params/#_3","text":"\u4f7f\u7528 Header \u58f0\u660eheader\uff0c\u4f7f\u7528\u4e0e Query \u548c Path \u76f8\u540c\u7684\u901a\u7528\u6a21\u5f0f. \u5e76\u4e14\u4e0d\u8981\u62c5\u5fc3\u53d8\u91cf\u4e2d\u7684\u4e0b\u5212\u7ebf\uff0c FLask Sugar \u5c06\u8d1f\u8d23\u8f6c\u6362\u5b83\u4eec\u3002","title":"\u56de\u987e"},{"location":"zh/params/path-params/","text":"\u8def\u5f84\u53c2\u6570 \u7528sugar\u6821\u9a8c from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/<a>/<b>\" ) def add_num ( a : int , b : int ): return { \"result\" : a + b } \u5982\u679c\u4f60\u7684\u8def\u5f84\u53c2\u6570\u548c\u53c2\u6570\u7c7b\u578b\u6ce8\u89e3\u4e0d\u4e00\u81f4\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u8fd9\u6837\u7684\u54cd\u5e94 { \"detail\" : [ [ { \"loc\" : [ \"a\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" }, { \"loc\" : [ \"b\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] ] } flask\u6821\u9a8c\u8def\u5f84\u53c2\u6570 from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<int:b>\" ) def add_num ( a , b ): return { \"result\" : a + b } \u5982\u679c\u4f60\u7684\u8def\u5f84\u53c2\u6570\u4e0d\u6ee1\u8db3\u89c4\u5219\uff0c\u4f1a\u5f97\u5230404\u54cd\u5e94 \u679a\u4e3e\u578b\u53c2\u6570 \u4f60\u53ef\u4ee5\u4f7f\u7528 Literal \u53bb\u6821\u9a8c\u53c2\u6570 from flask_sugar import Sugar from typing_extensions import Literal app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<int:b>\" ) def add_num ( a : Literal [ 1 , 3 , 5 ], b : int ): return { \"result\" : a + b } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d, a\u7684\u503c\u5fc5\u987b\u5728[1, 3, 5]\u4e2d \u6821\u9a8c\u66f4\u591a\u53c2\u6570(\u4f7f\u7528pydantic) from flask_sugar import Sugar , Path app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<string:b>\" ) def multi_str ( a : int = Path ( ... , gt = 3 ), b : str = Path ( ... , max_length = 4 )): return { \"result\" : a * b } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d, a\u7684\u503c\u5fc5\u987b\u5927\u4e8e3, b\u7684\u957f\u5ea6\u5fc5\u987b\u5c0f\u4e8e4 OpenAPI\u6587\u6863 \u73b0\u5728\uff0c\u5f53\u60a8\u5728\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95eehttp://localhost:5000/doc\uff0c\u60a8\u5c06\u770b\u5230\u81ea\u52a8\u3001\u4ea4\u4e92\u5f0f\u7684API\u6587\u6863\u3002","title":"\u8def\u5f84\u53c2\u6570"},{"location":"zh/params/path-params/#_1","text":"","title":"\u8def\u5f84\u53c2\u6570"},{"location":"zh/params/path-params/#sugar","text":"from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/<a>/<b>\" ) def add_num ( a : int , b : int ): return { \"result\" : a + b } \u5982\u679c\u4f60\u7684\u8def\u5f84\u53c2\u6570\u548c\u53c2\u6570\u7c7b\u578b\u6ce8\u89e3\u4e0d\u4e00\u81f4\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u8fd9\u6837\u7684\u54cd\u5e94 { \"detail\" : [ [ { \"loc\" : [ \"a\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" }, { \"loc\" : [ \"b\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] ] }","title":"\u7528sugar\u6821\u9a8c"},{"location":"zh/params/path-params/#flask","text":"from flask_sugar import Sugar app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<int:b>\" ) def add_num ( a , b ): return { \"result\" : a + b } \u5982\u679c\u4f60\u7684\u8def\u5f84\u53c2\u6570\u4e0d\u6ee1\u8db3\u89c4\u5219\uff0c\u4f1a\u5f97\u5230404\u54cd\u5e94","title":"flask\u6821\u9a8c\u8def\u5f84\u53c2\u6570"},{"location":"zh/params/path-params/#_2","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 Literal \u53bb\u6821\u9a8c\u53c2\u6570 from flask_sugar import Sugar from typing_extensions import Literal app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<int:b>\" ) def add_num ( a : Literal [ 1 , 3 , 5 ], b : int ): return { \"result\" : a + b } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d, a\u7684\u503c\u5fc5\u987b\u5728[1, 3, 5]\u4e2d","title":"\u679a\u4e3e\u578b\u53c2\u6570"},{"location":"zh/params/path-params/#pydantic","text":"from flask_sugar import Sugar , Path app = Sugar ( __name__ ) @app . get ( \"/<int:a>/<string:b>\" ) def multi_str ( a : int = Path ( ... , gt = 3 ), b : str = Path ( ... , max_length = 4 )): return { \"result\" : a * b } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d, a\u7684\u503c\u5fc5\u987b\u5927\u4e8e3, b\u7684\u957f\u5ea6\u5fc5\u987b\u5c0f\u4e8e4","title":"\u6821\u9a8c\u66f4\u591a\u53c2\u6570(\u4f7f\u7528pydantic)"},{"location":"zh/params/path-params/#openapi","text":"\u73b0\u5728\uff0c\u5f53\u60a8\u5728\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95eehttp://localhost:5000/doc\uff0c\u60a8\u5c06\u770b\u5230\u81ea\u52a8\u3001\u4ea4\u4e92\u5f0f\u7684API\u6587\u6863\u3002","title":"OpenAPI\u6587\u6863"},{"location":"zh/params/query-params/","text":"\u67e5\u8be2\u53c2\u6570 \u5f53\u60a8\u58f0\u660e\u4e0d\u5c5e\u4e8e\u8def\u5f84\u53c2\u6570\u7684\u5176\u4ed6\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5b83\u4eec\u5c06\u81ea\u52a8\u89e3\u91ca\u4e3a\u201c\u67e5\u8be2\u201d\u53c2\u6570\u3002 nums = list ( range ( 100 )) @app . get ( \"/nums\" ) def get_nums ( limit : int = 10 , offset : int = 0 ): return { \"results\" : nums [ offset : offset + limit ]} \u4f60\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u6837\u7684url\u53bb\u4f7f\u7528\u8fd9\u4e2a\u89c6\u56fe\u51fd\u6570: http://localhost:5000/nums?offset=0&limit=10 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709GET\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u5f53\u60a8\u4e3a\u51fd\u6570\u53c2\u6570\u6dfb\u52a0\u7c7b\u578b\u6ce8\u91ca\u65f6\uff0c\u5b83\u4eec\u5c06\u8f6c\u6362\u4e3a\u8be5\u7c7b\u578b\u5e76\u6839\u636e\u8be5\u7c7b\u578b\u8fdb\u884c\u9a8c\u8bc1\u3002 \u8def\u5f84\u53c2\u6570\u7684\u597d\u5904\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u67e5\u8be2\u53c2\u6570: \u7f16\u8f91\u5668\u53cb\u597d \u6570\u636e\u89e3\u6790 \u6570\u636e\u6821\u9a8c \u81ea\u52a8\u751f\u6210\u6587\u6863 \u6ce8\u610f: \u5f53\u4f60\u6ca1\u6709\u7ed9\u4f60\u7684\u53c2\u6570\u52a0\u7c7b\u578b\u6ce8\u89e3\u65f6, \u5b83\u4eec\u5c06\u4f1a\u88ab\u89c6\u4e3a str \u7c7b\u578b: @app . get ( \"/nums\" ) def get_nums ( limit , offset ): # type(limit) == str # type(offset) == str \u9ed8\u8ba4\u503c \u7531\u4e8e\u67e5\u8be2\u53c2\u6570\u4e0d\u662furl\u8def\u5f84\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u5b83\u4eec\u662f\u53ef\u9009\u7684\u5e76\u4e14\u53ef\u4ee5\u5177\u6709\u9ed8\u8ba4\u503c: @app . get ( \"/nums\" ) def get_nums ( limit : int = 10 , offset : int = 0 ): return nums [ offset : offset + limit ] \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u503c offset=0 \u548c limit=10. \u6240\u4ee5, \u8bbf\u95ee\u7f51\u5740: http://localhost:5000/nums \u8bbf\u95ee\u4e0b\u9762\u5730\u5740\u6548\u679c\u76f8\u540c: http://localhost:5000/nums?offset=0&limit=10 \u5982\u679c\u4f60\u8bbf\u95ee\u4e86\u4f8b\u5b50\u7684url: http://localhost:5000/nums?offset=20 \u4f60\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u503c\u5c06\u662f: offset=20 (\u56e0\u4e3a\u4f60\u5728url\u4e2d\u8bbe\u7f6e\u4e86offset) limit=10 (\u56e0\u4e3a\u5b83\u662f\u9ed8\u8ba4\u503c) \u5fc5\u987b\u548c\u53ef\u9009\u53c2\u6570 \u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0e\u58f0\u660e Python \u51fd\u6570\u53c2\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u58f0\u660e\u5fc5\u9700\u6216\u53ef\u9009\u7684 GET \u53c2\u6570: nums = list ( range ( 100 )) @app . get ( \"/nums\" ) def get_nums ( greater_than : int , offset : int = 10 ): results = [ num for num in nums if num > greater_than ] return { \"results\" : results [ offset : offset + 10 ]} \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cFlask Sugar \u5c06\u59cb\u7ec8\u9a8c\u8bc1\u60a8\u5728 GET \u4e2d\u4f20\u9012\u7684 greater_than \u53c2\u6570\uff0c\u5e76\u4e14 offset \u53c2\u6570\u662f\u4e00\u4e2a\u53ef\u9009\u6574\u6570. \u6821\u9a8c\u66f4\u591a\u53c2\u6570(\u4f7f\u7528pydantic) from flask_sugar import Sugar , Query app = Sugar ( __name__ ) @app . get ( \"/nums\" ) def get_nums ( limit : Optional [ int ] = Query ( default = 10 , le = 25 ), offset : Optional [ int ] = Query ( default = 0 )): return nums [ offset : offset + limit ] \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u503c offset=0 \u548c limit=10, limit\u7684\u503c\u5fc5\u987b\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e25 GET\u53c2\u6570\u7c7b\u578b\u8f6c\u6362 \u6211\u4eec\u6765\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570: from datetime import date @app . get ( \"/example\" ) def example ( s : str = None , b : bool = None , d : date = None , i : int = None ): return { \"value\" : [ s , b , d , i ]} \u7c7b\u578b\u4e3a str \u7684\u53c2\u6570\u5c06\u4f1a\u88ab\u539f\u6837\u4f20\u9012. \u7c7b\u578b\u4e3a bool \u7684\u53c2\u6570, \u50cf\u4e0b\u9762\u8fd9\u6837\u7684: http://localhost:5000/example?b=1 http://localhost:5000/example?b=True http://localhost:5000/example?b=true http://localhost:5000/example?b=on http://localhost:5000/example?b=yes \u6216\u4efb\u4f55\u5176\u4ed6\u5927\u5c0f\u5199\u53d8\u4f53\uff08\u5927\u5199\u3001\u5927\u5199\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u7b49\uff09\uff0c\u60a8\u7684\u51fd\u6570\u5c06\u770b\u5230\u53c2\u6570 b \u7684 bool \u503c\u4e3a True \uff0c\u5426\u5219\u4e3a False . \u65e5\u671f\u53ef\u4ee5\u662f\u65e5\u671f\u5b57\u7b26\u4e32\u548c\u6574\u6570(unix\u65f6\u95f4\u6233): http://localhost:5000/example?d=1577836800 # same as 2020-01-01 http://localhost:5000/example?d=2020-01-01","title":"\u67e5\u8be2\u53c2\u6570"},{"location":"zh/params/query-params/#_1","text":"\u5f53\u60a8\u58f0\u660e\u4e0d\u5c5e\u4e8e\u8def\u5f84\u53c2\u6570\u7684\u5176\u4ed6\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5b83\u4eec\u5c06\u81ea\u52a8\u89e3\u91ca\u4e3a\u201c\u67e5\u8be2\u201d\u53c2\u6570\u3002 nums = list ( range ( 100 )) @app . get ( \"/nums\" ) def get_nums ( limit : int = 10 , offset : int = 0 ): return { \"results\" : nums [ offset : offset + limit ]} \u4f60\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u6837\u7684url\u53bb\u4f7f\u7528\u8fd9\u4e2a\u89c6\u56fe\u51fd\u6570: http://localhost:5000/nums?offset=0&limit=10 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709GET\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u5f53\u60a8\u4e3a\u51fd\u6570\u53c2\u6570\u6dfb\u52a0\u7c7b\u578b\u6ce8\u91ca\u65f6\uff0c\u5b83\u4eec\u5c06\u8f6c\u6362\u4e3a\u8be5\u7c7b\u578b\u5e76\u6839\u636e\u8be5\u7c7b\u578b\u8fdb\u884c\u9a8c\u8bc1\u3002 \u8def\u5f84\u53c2\u6570\u7684\u597d\u5904\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u67e5\u8be2\u53c2\u6570: \u7f16\u8f91\u5668\u53cb\u597d \u6570\u636e\u89e3\u6790 \u6570\u636e\u6821\u9a8c \u81ea\u52a8\u751f\u6210\u6587\u6863 \u6ce8\u610f: \u5f53\u4f60\u6ca1\u6709\u7ed9\u4f60\u7684\u53c2\u6570\u52a0\u7c7b\u578b\u6ce8\u89e3\u65f6, \u5b83\u4eec\u5c06\u4f1a\u88ab\u89c6\u4e3a str \u7c7b\u578b: @app . get ( \"/nums\" ) def get_nums ( limit , offset ): # type(limit) == str # type(offset) == str","title":"\u67e5\u8be2\u53c2\u6570"},{"location":"zh/params/query-params/#_2","text":"\u7531\u4e8e\u67e5\u8be2\u53c2\u6570\u4e0d\u662furl\u8def\u5f84\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u5b83\u4eec\u662f\u53ef\u9009\u7684\u5e76\u4e14\u53ef\u4ee5\u5177\u6709\u9ed8\u8ba4\u503c: @app . get ( \"/nums\" ) def get_nums ( limit : int = 10 , offset : int = 0 ): return nums [ offset : offset + limit ] \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u503c offset=0 \u548c limit=10. \u6240\u4ee5, \u8bbf\u95ee\u7f51\u5740: http://localhost:5000/nums \u8bbf\u95ee\u4e0b\u9762\u5730\u5740\u6548\u679c\u76f8\u540c: http://localhost:5000/nums?offset=0&limit=10 \u5982\u679c\u4f60\u8bbf\u95ee\u4e86\u4f8b\u5b50\u7684url: http://localhost:5000/nums?offset=20 \u4f60\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u503c\u5c06\u662f: offset=20 (\u56e0\u4e3a\u4f60\u5728url\u4e2d\u8bbe\u7f6e\u4e86offset) limit=10 (\u56e0\u4e3a\u5b83\u662f\u9ed8\u8ba4\u503c)","title":"\u9ed8\u8ba4\u503c"},{"location":"zh/params/query-params/#_3","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0e\u58f0\u660e Python \u51fd\u6570\u53c2\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u58f0\u660e\u5fc5\u9700\u6216\u53ef\u9009\u7684 GET \u53c2\u6570: nums = list ( range ( 100 )) @app . get ( \"/nums\" ) def get_nums ( greater_than : int , offset : int = 10 ): results = [ num for num in nums if num > greater_than ] return { \"results\" : results [ offset : offset + 10 ]} \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cFlask Sugar \u5c06\u59cb\u7ec8\u9a8c\u8bc1\u60a8\u5728 GET \u4e2d\u4f20\u9012\u7684 greater_than \u53c2\u6570\uff0c\u5e76\u4e14 offset \u53c2\u6570\u662f\u4e00\u4e2a\u53ef\u9009\u6574\u6570.","title":"\u5fc5\u987b\u548c\u53ef\u9009\u53c2\u6570"},{"location":"zh/params/query-params/#pydantic","text":"from flask_sugar import Sugar , Query app = Sugar ( __name__ ) @app . get ( \"/nums\" ) def get_nums ( limit : Optional [ int ] = Query ( default = 10 , le = 25 ), offset : Optional [ int ] = Query ( default = 0 )): return nums [ offset : offset + limit ] \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u503c offset=0 \u548c limit=10, limit\u7684\u503c\u5fc5\u987b\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e25","title":"\u6821\u9a8c\u66f4\u591a\u53c2\u6570(\u4f7f\u7528pydantic)"},{"location":"zh/params/query-params/#get","text":"\u6211\u4eec\u6765\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570: from datetime import date @app . get ( \"/example\" ) def example ( s : str = None , b : bool = None , d : date = None , i : int = None ): return { \"value\" : [ s , b , d , i ]} \u7c7b\u578b\u4e3a str \u7684\u53c2\u6570\u5c06\u4f1a\u88ab\u539f\u6837\u4f20\u9012. \u7c7b\u578b\u4e3a bool \u7684\u53c2\u6570, \u50cf\u4e0b\u9762\u8fd9\u6837\u7684: http://localhost:5000/example?b=1 http://localhost:5000/example?b=True http://localhost:5000/example?b=true http://localhost:5000/example?b=on http://localhost:5000/example?b=yes \u6216\u4efb\u4f55\u5176\u4ed6\u5927\u5c0f\u5199\u53d8\u4f53\uff08\u5927\u5199\u3001\u5927\u5199\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u7b49\uff09\uff0c\u60a8\u7684\u51fd\u6570\u5c06\u770b\u5230\u53c2\u6570 b \u7684 bool \u503c\u4e3a True \uff0c\u5426\u5219\u4e3a False . \u65e5\u671f\u53ef\u4ee5\u662f\u65e5\u671f\u5b57\u7b26\u4e32\u548c\u6574\u6570(unix\u65f6\u95f4\u6233): http://localhost:5000/example?d=1577836800 # same as 2020-01-01 http://localhost:5000/example?d=2020-01-01","title":"GET\u53c2\u6570\u7c7b\u578b\u8f6c\u6362"},{"location":"zh/params/request-body/","text":"\u8bf7\u6c42\u4f53 \u5f53\u60a8\u9700\u8981\u5c06\u6570\u636e\u4ece\u5ba2\u6237\u7aef\uff08\u6bd4\u5982\u6d4f\u89c8\u5668\uff09\u53d1\u9001\u5230\u60a8\u7684 API \u65f6\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a request body \u53d1\u9001\u3002 request \u6b63\u6587\u662f\u5ba2\u6237\u7aef\u53d1\u9001\u5230\u60a8\u7684 API \u7684\u6570\u636e\u3002 response \u6b63\u6587\u662f\u60a8\u7684 API \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u6570\u636e\u3002 \u60a8\u7684 API \u51e0\u4e4e\u603b\u662f\u5fc5\u987b\u53d1\u9001 response body \u3002 \u4f46\u662f\u5ba2\u6237\u7aef\u4e0d\u4e00\u5b9a\u9700\u8981\u4e00\u76f4\u53d1\u9001 request body \u3002 \u8981\u58f0\u660e request body \uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Pydantic \u6a21\u578b\u548c \u4ed6\u4eec\u6240\u6709\u7684\u80fd\u529b\u548c\u597d\u5904\u3002 \u5bfc\u5165 Pydantic \u7684 BaseModel \u9996\u5148\uff0c\u4f60\u9700\u8981\u4ece pydantic \u5bfc\u5165 BaseModel : from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item \u521b\u5efa\u60a8\u7684\u6570\u636e\u6a21\u578b \u7136\u540e\u5c06\u6570\u636e\u6a21\u578b\u58f0\u660e\u4e3a\u7ee7\u627f\u81ea BaseModel \u7684\u7c7b. \u5bf9\u6240\u6709\u5c5e\u6027\u4f7f\u7528\u6807\u51c6 Python \u7c7b\u578b\u6ce8\u89e3: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item \u4e0e\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u65f6\u76f8\u540c\uff0c\u5f53\u6a21\u578b\u5c5e\u6027\u5177\u6709\u9ed8\u8ba4\u503c\u65f6\uff0c\u5b83\u4e0d\u662f\u5fc5\u9700\u7684\u3002 \u5426\u5219\uff0c\u5b83\u662f\u5fc5\u9700\u7684\u3002 \u4f7f\u7528 None \u4f7f\u5176\u53ea\u662f\u53ef\u9009\u7684\u3002 \u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u8fd9\u4e2a\u6a21\u578b\u58f0\u660e\u4e86\u4e00\u4e2a JSON \" object \"\uff08\u6216 Python dict \uff09\uff0c\u5982\uff1a { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } ...\u7531\u4e8e description \u548c tax \u662f\u53ef\u9009\u7684\uff08\u9ed8\u8ba4\u503c\u4e3a None\uff09\uff0c\u8fd9\u4e2a JSON\" object \"\u4e5f\u5c06\u662f\u6709\u6548\u7684: { \"name\" : \"Foo\" , \"price\" : 45.2 } \u5c06\u5176\u58f0\u660e\u4e3a\u53c2\u6570 \u8981\u5c06\u5176\u6dfb\u52a0\u5230\u60a8\u7684\u89c6\u56fe\u51fd\u6570\u4e2d\uff0c\u8bf7\u6309\u7167\u60a8\u58f0\u660e\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570\u7684\u65b9\u5f0f\u5bf9\u5176\u8fdb\u884c\u58f0\u660e: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item ...\u5e76\u5c06\u5176\u7c7b\u578b\u58f0\u660e\u4e3a\u60a8\u521b\u5efa\u7684\u6a21\u578b\uff0c Item . \u7ed3\u679c \u4ec5\u4f7f\u7528 Python \u7c7b\u578b\u6ce8\u89e3\uff0c Flask Sugar \u5c06: \u5c06\u8bf7\u6c42\u4f53\u4f5c\u4e3a JSON \u8bfb\u53d6\u3002 \u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u7c7b\u578b\uff08\u5728\u9700\u8981\u65f6\uff09\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5982\u679c\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de\u4e00\u6761\u6e05\u6670\u6613\u8bfb\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u6307\u51fa\u4e0d\u6b63\u786e\u6570\u636e\u7684\u786e\u5207\u4f4d\u7f6e\u548c\u5185\u5bb9\u3002 \u5c06\u63a5\u6536\u7684\u6570\u636e\u8d4b\u503c\u5230\u53c2\u6570 item \u4e2d\u3002 \u7531\u4e8e\u4f60\u5df2\u7ecf\u5728\u51fd\u6570\u4e2d\u5c06\u5b83\u58f0\u660e\u4e3a Item \u7c7b\u578b\uff0c\u4f60\u8fd8\u5c06\u83b7\u5f97\u5bf9\u4e8e\u6240\u6709\u5c5e\u6027\u53ca\u5176\u7c7b\u578b\u7684\u4e00\u5207\u7f16\u8f91\u5668\u652f\u6301\uff08\u4ee3\u7801\u8865\u5168\u7b49\uff09\u3002 \u4e3a\u4f60\u7684\u6a21\u578b\u751f\u6210 JSON \u6a21\u5f0f \u5b9a\u4e49\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u4f55\u5bf9\u4f60\u7684\u9879\u76ee\u6709\u610f\u4e49\u7684\u5730\u65b9\u4f7f\u7528\u5b83\u4eec\u3002 \u8fd9\u4e9b\u6a21\u5f0f\u5c06\u6210\u4e3a\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u88ab\u81ea\u52a8\u5316\u6587\u6863 UI \u6240\u4f7f\u7528\u3002 \u81ea\u52a8\u5316\u6587\u6863 \u4f60\u6240\u5b9a\u4e49\u6a21\u578b\u7684 JSON \u6a21\u5f0f\u5c06\u6210\u4e3a\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u5728\u4ea4\u4e92\u5f0f API \u6587\u6863\u4e2d\u5c55\u793a\uff1a \u800c\u4e14\u8fd8\u5c06\u5728\u6bcf\u4e00\u4e2a\u9700\u8981\u5b83\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c \u7684 API \u6587\u6863\u4e2d\u4f7f\u7528\uff1a \u4f7f\u7528\u6a21\u578b \u5728\u51fd\u6570\u5185\u90e8\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u6a21\u578b\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027\uff1a from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict \u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570 \u4f60\u53ef\u4ee5\u540c\u65f6\u58f0\u660e\u8def\u5f84\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u3002 Flask Sugar \u5c06\u8bc6\u522b\u51fa\u4e0e\u8def\u5f84\u53c2\u6570\u5339\u914d\u7684\u51fd\u6570\u53c2\u6570\u5e94 \u4ece\u8def\u5f84\u4e2d\u83b7\u53d6 \uff0c\u800c\u58f0\u660e\u4e3a Pydantic \u6a21\u578b\u7684\u51fd\u6570\u53c2\u6570\u5e94 \u4ece\u8bf7\u6c42\u4f53\u4e2d\u83b7\u53d6 \u3002 from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . put ( \"/items/<item_id>\" ) def create ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()} \u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570 + \u67e5\u8be2\u53c2\u6570 \u4f60\u8fd8\u53ef\u4ee5\u540c\u65f6\u58f0\u660e \u8bf7\u6c42\u4f53 \u3001 \u8def\u5f84\u53c2\u6570 \u548c \u67e5\u8be2\u53c2\u6570 \u3002 Flask Sugar \u4f1a\u8bc6\u522b\u5b83\u4eec\u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u5e76\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u83b7\u53d6\u6570\u636e\u3002 from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/<item_id>\" ) def create ( item_id : int , item : Item , q : Optional [ str ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result \u51fd\u6570\u53c2\u6570\u5c06\u4f9d\u6b21\u6309\u5982\u4e0b\u89c4\u5219\u8fdb\u884c\u8bc6\u522b\uff1a \u5982\u679c\u5728 \u8def\u5f84 \u4e2d\u4e5f\u58f0\u660e\u4e86\u8be5\u53c2\u6570\uff0c\u5b83\u5c06\u88ab\u7528\u4f5c\u8def\u5f84\u53c2\u6570\u3002 \u5982\u679c\u53c2\u6570\u5c5e\u4e8e \u5355\u4e00\u7c7b\u578b \uff08\u6bd4\u5982 int \u3001 float \u3001 str \u3001 bool \u7b49\uff09\u5b83\u5c06\u88ab\u89e3\u91ca\u4e3a \u67e5\u8be2 \u53c2\u6570\u3002 \u5982\u679c\u53c2\u6570\u7684\u7c7b\u578b\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a Pydantic \u6a21\u578b \uff0c\u5b83\u5c06\u88ab\u89e3\u91ca\u4e3a \u8bf7\u6c42\u4f53 \u3002 Note Flask Sugar\u5c06\u77e5\u9053 q \u7684\u503c\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u503c =None \u3002 Optional[str] \u4e2d\u7684 Optional \u4e0d\u88abFlask Sugar\u4f7f\u7528\uff0c\u4f46\u5b83\u5141\u8bb8\u7f16\u8f91\u5668\u4e3a\u60a8\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\u5e76\u68c0\u6d4b\u9519\u8bef\u3002","title":"\u8bf7\u6c42\u4f53"},{"location":"zh/params/request-body/#_1","text":"\u5f53\u60a8\u9700\u8981\u5c06\u6570\u636e\u4ece\u5ba2\u6237\u7aef\uff08\u6bd4\u5982\u6d4f\u89c8\u5668\uff09\u53d1\u9001\u5230\u60a8\u7684 API \u65f6\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a request body \u53d1\u9001\u3002 request \u6b63\u6587\u662f\u5ba2\u6237\u7aef\u53d1\u9001\u5230\u60a8\u7684 API \u7684\u6570\u636e\u3002 response \u6b63\u6587\u662f\u60a8\u7684 API \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u6570\u636e\u3002 \u60a8\u7684 API \u51e0\u4e4e\u603b\u662f\u5fc5\u987b\u53d1\u9001 response body \u3002 \u4f46\u662f\u5ba2\u6237\u7aef\u4e0d\u4e00\u5b9a\u9700\u8981\u4e00\u76f4\u53d1\u9001 request body \u3002 \u8981\u58f0\u660e request body \uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 Pydantic \u6a21\u578b\u548c \u4ed6\u4eec\u6240\u6709\u7684\u80fd\u529b\u548c\u597d\u5904\u3002","title":"\u8bf7\u6c42\u4f53"},{"location":"zh/params/request-body/#pydantic-basemodel","text":"\u9996\u5148\uff0c\u4f60\u9700\u8981\u4ece pydantic \u5bfc\u5165 BaseModel : from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item","title":"\u5bfc\u5165 Pydantic \u7684 BaseModel"},{"location":"zh/params/request-body/#_2","text":"\u7136\u540e\u5c06\u6570\u636e\u6a21\u578b\u58f0\u660e\u4e3a\u7ee7\u627f\u81ea BaseModel \u7684\u7c7b. \u5bf9\u6240\u6709\u5c5e\u6027\u4f7f\u7528\u6807\u51c6 Python \u7c7b\u578b\u6ce8\u89e3: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item \u4e0e\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u65f6\u76f8\u540c\uff0c\u5f53\u6a21\u578b\u5c5e\u6027\u5177\u6709\u9ed8\u8ba4\u503c\u65f6\uff0c\u5b83\u4e0d\u662f\u5fc5\u9700\u7684\u3002 \u5426\u5219\uff0c\u5b83\u662f\u5fc5\u9700\u7684\u3002 \u4f7f\u7528 None \u4f7f\u5176\u53ea\u662f\u53ef\u9009\u7684\u3002 \u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u8fd9\u4e2a\u6a21\u578b\u58f0\u660e\u4e86\u4e00\u4e2a JSON \" object \"\uff08\u6216 Python dict \uff09\uff0c\u5982\uff1a { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } ...\u7531\u4e8e description \u548c tax \u662f\u53ef\u9009\u7684\uff08\u9ed8\u8ba4\u503c\u4e3a None\uff09\uff0c\u8fd9\u4e2a JSON\" object \"\u4e5f\u5c06\u662f\u6709\u6548\u7684: { \"name\" : \"Foo\" , \"price\" : 45.2 }","title":"\u521b\u5efa\u60a8\u7684\u6570\u636e\u6a21\u578b"},{"location":"zh/params/request-body/#_3","text":"\u8981\u5c06\u5176\u6dfb\u52a0\u5230\u60a8\u7684\u89c6\u56fe\u51fd\u6570\u4e2d\uff0c\u8bf7\u6309\u7167\u60a8\u58f0\u660e\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570\u7684\u65b9\u5f0f\u5bf9\u5176\u8fdb\u884c\u58f0\u660e: from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): return item ...\u5e76\u5c06\u5176\u7c7b\u578b\u58f0\u660e\u4e3a\u60a8\u521b\u5efa\u7684\u6a21\u578b\uff0c Item .","title":"\u5c06\u5176\u58f0\u660e\u4e3a\u53c2\u6570"},{"location":"zh/params/request-body/#_4","text":"\u4ec5\u4f7f\u7528 Python \u7c7b\u578b\u6ce8\u89e3\uff0c Flask Sugar \u5c06: \u5c06\u8bf7\u6c42\u4f53\u4f5c\u4e3a JSON \u8bfb\u53d6\u3002 \u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u7c7b\u578b\uff08\u5728\u9700\u8981\u65f6\uff09\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5982\u679c\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de\u4e00\u6761\u6e05\u6670\u6613\u8bfb\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u6307\u51fa\u4e0d\u6b63\u786e\u6570\u636e\u7684\u786e\u5207\u4f4d\u7f6e\u548c\u5185\u5bb9\u3002 \u5c06\u63a5\u6536\u7684\u6570\u636e\u8d4b\u503c\u5230\u53c2\u6570 item \u4e2d\u3002 \u7531\u4e8e\u4f60\u5df2\u7ecf\u5728\u51fd\u6570\u4e2d\u5c06\u5b83\u58f0\u660e\u4e3a Item \u7c7b\u578b\uff0c\u4f60\u8fd8\u5c06\u83b7\u5f97\u5bf9\u4e8e\u6240\u6709\u5c5e\u6027\u53ca\u5176\u7c7b\u578b\u7684\u4e00\u5207\u7f16\u8f91\u5668\u652f\u6301\uff08\u4ee3\u7801\u8865\u5168\u7b49\uff09\u3002 \u4e3a\u4f60\u7684\u6a21\u578b\u751f\u6210 JSON \u6a21\u5f0f \u5b9a\u4e49\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u4f55\u5bf9\u4f60\u7684\u9879\u76ee\u6709\u610f\u4e49\u7684\u5730\u65b9\u4f7f\u7528\u5b83\u4eec\u3002 \u8fd9\u4e9b\u6a21\u5f0f\u5c06\u6210\u4e3a\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u88ab\u81ea\u52a8\u5316\u6587\u6863 UI \u6240\u4f7f\u7528\u3002","title":"\u7ed3\u679c"},{"location":"zh/params/request-body/#_5","text":"\u4f60\u6240\u5b9a\u4e49\u6a21\u578b\u7684 JSON \u6a21\u5f0f\u5c06\u6210\u4e3a\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u5728\u4ea4\u4e92\u5f0f API \u6587\u6863\u4e2d\u5c55\u793a\uff1a \u800c\u4e14\u8fd8\u5c06\u5728\u6bcf\u4e00\u4e2a\u9700\u8981\u5b83\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c \u7684 API \u6587\u6863\u4e2d\u4f7f\u7528\uff1a","title":"\u81ea\u52a8\u5316\u6587\u6863"},{"location":"zh/params/request-body/#_6","text":"\u5728\u51fd\u6570\u5185\u90e8\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u6a21\u578b\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027\uff1a from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/\" ) def create ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict","title":"\u4f7f\u7528\u6a21\u578b"},{"location":"zh/params/request-body/#_7","text":"\u4f60\u53ef\u4ee5\u540c\u65f6\u58f0\u660e\u8def\u5f84\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u3002 Flask Sugar \u5c06\u8bc6\u522b\u51fa\u4e0e\u8def\u5f84\u53c2\u6570\u5339\u914d\u7684\u51fd\u6570\u53c2\u6570\u5e94 \u4ece\u8def\u5f84\u4e2d\u83b7\u53d6 \uff0c\u800c\u58f0\u660e\u4e3a Pydantic \u6a21\u578b\u7684\u51fd\u6570\u53c2\u6570\u5e94 \u4ece\u8bf7\u6c42\u4f53\u4e2d\u83b7\u53d6 \u3002 from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . put ( \"/items/<item_id>\" ) def create ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()}","title":"\u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570"},{"location":"zh/params/request-body/#_8","text":"\u4f60\u8fd8\u53ef\u4ee5\u540c\u65f6\u58f0\u660e \u8bf7\u6c42\u4f53 \u3001 \u8def\u5f84\u53c2\u6570 \u548c \u67e5\u8be2\u53c2\u6570 \u3002 Flask Sugar \u4f1a\u8bc6\u522b\u5b83\u4eec\u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u5e76\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u83b7\u53d6\u6570\u636e\u3002 from typing import Optional from flask_sugar import Sugar from pydantic import BaseModel app = Sugar ( __name__ ) class Item ( BaseModel ): name : str description : Optional [ str ] = None price : float tax : Optional [ float ] = None @app . post ( \"/items/<item_id>\" ) def create ( item_id : int , item : Item , q : Optional [ str ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result \u51fd\u6570\u53c2\u6570\u5c06\u4f9d\u6b21\u6309\u5982\u4e0b\u89c4\u5219\u8fdb\u884c\u8bc6\u522b\uff1a \u5982\u679c\u5728 \u8def\u5f84 \u4e2d\u4e5f\u58f0\u660e\u4e86\u8be5\u53c2\u6570\uff0c\u5b83\u5c06\u88ab\u7528\u4f5c\u8def\u5f84\u53c2\u6570\u3002 \u5982\u679c\u53c2\u6570\u5c5e\u4e8e \u5355\u4e00\u7c7b\u578b \uff08\u6bd4\u5982 int \u3001 float \u3001 str \u3001 bool \u7b49\uff09\u5b83\u5c06\u88ab\u89e3\u91ca\u4e3a \u67e5\u8be2 \u53c2\u6570\u3002 \u5982\u679c\u53c2\u6570\u7684\u7c7b\u578b\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a Pydantic \u6a21\u578b \uff0c\u5b83\u5c06\u88ab\u89e3\u91ca\u4e3a \u8bf7\u6c42\u4f53 \u3002 Note Flask Sugar\u5c06\u77e5\u9053 q \u7684\u503c\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u503c =None \u3002 Optional[str] \u4e2d\u7684 Optional \u4e0d\u88abFlask Sugar\u4f7f\u7528\uff0c\u4f46\u5b83\u5141\u8bb8\u7f16\u8f91\u5668\u4e3a\u60a8\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\u5e76\u68c0\u6d4b\u9519\u8bef\u3002","title":"\u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570 + \u67e5\u8be2\u53c2\u6570"}]}